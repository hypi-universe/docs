"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4276],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),h=i,m=d["".concat(p,".").concat(h)]||d[h]||c[h]||r;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},69941:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),o=["components"],l={id:"hypi-cli-vuejs-smartqueries",title:"Use Hypi in VueJS Smart Queries Project",sidebar_label:"VueJS Smart Queries",slug:"/lowcode/hypi-cli-vuejs-smartqueries"},p=void 0,s={unversionedId:"lowcode/hypi-cli-vuejs-smartqueries",id:"lowcode/hypi-cli-vuejs-smartqueries",title:"Use Hypi in VueJS Smart Queries Project",description:"In this guide, we will access Hypi APIs inside the VueJS version 2 TypeScript app with smart queries using the Hypi CLI.",source:"@site/content/lowcode/hypi-cli-vuejs-smartqueries.md",sourceDirName:"lowcode",slug:"/lowcode/hypi-cli-vuejs-smartqueries",permalink:"/docs/lowcode/hypi-cli-vuejs-smartqueries",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/lowcode/hypi-cli-vuejs-smartqueries.md",tags:[],version:"current",frontMatter:{id:"hypi-cli-vuejs-smartqueries",title:"Use Hypi in VueJS Smart Queries Project",sidebar_label:"VueJS Smart Queries",slug:"/lowcode/hypi-cli-vuejs-smartqueries"},sidebar:"docs",previous:{title:"VueJS Composition",permalink:"/docs/lowcode/hypi-cli-vuejs-composition"},next:{title:"GraphQL Overview",permalink:"/docs/lowcode/graphql"}},u=[{value:"Create VueJS 2 Smart Queries App",id:"create-vuejs-2-smart-queries-app",children:[],level:3},{value:"Login",id:"login",children:[],level:3},{value:"Hypi Init",id:"hypi-init",children:[],level:3},{value:"Schema Edit",id:"schema-edit",children:[],level:3},{value:"Hypi Sync",id:"hypi-sync",children:[],level:3},{value:"Hypi Generate",id:"hypi-generate",children:[],level:3},{value:"Using GraphQL queries",id:"using-graphql-queries",children:[],level:3},{value:"Authentication using Apollo Client",id:"authentication-using-apollo-client",children:[],level:3}],c={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this guide, we will access Hypi APIs inside the VueJS version 2 TypeScript app with smart queries using the Hypi CLI."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Prerequisites"),": Knowledge of application development using VueJS. Development set up for VueJS."),(0,r.kt)("h3",{id:"create-vuejs-2-smart-queries-app"},"Create VueJS 2 Smart Queries App"),(0,r.kt)("p",null,"Create a VueJS version 2 typescript project using the vue-cli from ",(0,r.kt)("a",{parentName:"p",href:"https://cli.vuejs.org/guide/installation.html"},"here")," or use an example from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/hypi-universe/hypi-cli-vuejs2-smart-queries-example"},"here")," ."),(0,r.kt)("p",null,"In this example, we will use the apollo client as the graphql client. Add the following dependencies to ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"apollo-boost": "^0.4.9",\n"graphql": "^15.5.1",\n"graphql-tag": "^2.12.5",\n"vue-apollo": "^3.0.7",\n"vue-apollo-smart-ops": "^0.0.3",\n')),(0,r.kt)("p",null,"OR"),(0,r.kt)("p",null,"Install the dependencies from the command line."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install --save vue-apollo vue-apollo-smart-ops graphql graphql-tag apollo-boost\n")),(0,r.kt)("p",null,"Let's start using Hypi CLI now."),(0,r.kt)("h3",{id:"login"},"Login"),(0,r.kt)("p",null,"On the command line, go to your VueJS application folder. Login to your Hypi account using ",(0,r.kt)("a",{parentName:"p",href:"/docs/lowcode/hypi-cli-intro#hypi-login"},"hypi login")," command. After successful login, the user config file will be placed in ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.config/hypi/config.json")," . In case of Windows, the file will be created in ",(0,r.kt)("inlineCode",{parentName:"p"},"\\Users\\user\\AppData\\Local")),(0,r.kt)("p",null,"Here, are the contents of the file. It makes the connection between Hypi and VueJS  app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n  "api_domain": "https://api.hypi.app",\n  "fn_domain": "https://fn.hypi.app",\n  "sessionExpires": 1657276287,\n  "sessionToken": "Auth-Token",\n  "domain": "professionally.apps.hypi.app"\n}\n')),(0,r.kt)("h3",{id:"hypi-init"},"Hypi Init"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"hypi init")," command to initialize a new hypi App and Instance in your VueJS project folder."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    USAGE\n      $ hypi init [WEBSITE] [NAME] [LABEL] [DOMAIN]\n    \n    OPTIONS\n      -h, --help           show CLI help\n      -i, --have_instance\n    \n    EXAMPLES\n      $ hypi init -i\n      $ hypi init --have_instance\n      $ hypi init\n")),(0,r.kt)("p",null,"Go to your VuesJS project folder on the command line and run ",(0,r.kt)("inlineCode",{parentName:"p"},"hypi init")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},">hypi init\nThis command will walk you through creating app.yaml and instance.yaml files.\n? Do you have a Hypi instance created at https://hypi.app that you\u2019d like to use? No\n? App name?  VueJSApp\n? App label?  VueJSApp\n? Website?  https://hypi.app/apps\n? Domain(Optional)?\nInit done successfully, Now write your schema then run the hypi sync command to generate your app's API\n")),(0,r.kt)("p",null,"This creates a  ",(0,r.kt)("inlineCode",{parentName:"p"},".hypi")," folder in your VueJS project folder. Within ",(0,r.kt)("inlineCode",{parentName:"p"},".hypi"),", three files are created. ",(0,r.kt)("inlineCode",{parentName:"p"},"app.yaml"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"instance.yaml")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.graphql"),". The files app.yaml and instance.yaml has Hypi ",(0,r.kt)("inlineCode",{parentName:"p"},"App and Instance")," details. "),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You should write your schema inside ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.graphql")," file."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"app.yaml\n========\nwebsite: https://hypi.app/apps\nname: VueJSApp\nlabel: VueJSApp\nreleases:\n  - name: latest\n    schema:\n      types: schema.graphql\n    status: PUBLISHED\n    notes: latest version\n    hypi:\n      id: 01F8EMYY0935THH0GX40K7QESY\nhypi:\n  id: 01F8EMYY01YDD2HB0WH8E1AZJW\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"instance.yaml\n=============\ndomain: engulfs.apps.hypi.app\nrelease:\n  name: latest\n  hypi:\n    id: 01F8EMYY0935THH0GX40K7QESY\nhypi:\n  id: 01F8EMZ1PN1ANAS1C15K6DD63H\n")),(0,r.kt)("p",null,"The new app gets created on the Hypi account. If an existing domain is not provided then a new domain also gets created."),(0,r.kt)("p",null,"If you want to use an existing domain on the Hypi website instead of creating a new one, you may provide that domain that as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hypi init\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"This command will walk you through creating app.yaml and instance.yaml files.\n? Do you have a Hypi instance created at https://hypi.app that you\u2019d like to use? Yes\n? Please enter a valid domain engulfs.apps.hypi.app\nInit done successfully, Now write your schema then run the hypi sync command to generate your app's API\n")),(0,r.kt)("p",null,"In this case, the existing schema will get imported. "),(0,r.kt)("h3",{id:"schema-edit"},"Schema Edit"),(0,r.kt)("p",null,"You may edit the schema in the ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.graphql"),"\nLet's edit the schema, to add the data types. Here, we are adding Product data type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"type Product {\n    hypi: Hypi\n    title: String!\n    description: String!\n    price: Float\n}\n")),(0,r.kt)("h3",{id:"hypi-sync"},"Hypi Sync"),(0,r.kt)("p",null,"You need to sync edited local schema file to get full Hypi schema. Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"hypi sync")," command for that."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    USAGE\n      $ hypi sync \n    \n    OPTIONS\n      -h, --help  show CLI help\n    \n    EXAMPLE\n      $ hypi sync\n")),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"hypi sync")," to generate full schema file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hypi sync \nApp created with id : 01F8EMYY01YDD2HB0WH8E1AZJW\nInstance created with id : 01F8EMZ1PN1ANAS1C15K6DD63H\nupdateAppYamlFile done\nupdateInstanceYamlFile done\nIntrospection done\nSync Process... done\nThe file was succesfully generated!\n")),(0,r.kt)("p",null,"After syncing, ",(0,r.kt)("inlineCode",{parentName:"p"},"generated-schema.graphql")," file gets generated in the ",(0,r.kt)("inlineCode",{parentName:"p"},".hypi")," folder that has full hypi schema."),(0,r.kt)("h3",{id:"hypi-generate"},"Hypi Generate"),(0,r.kt)("p",null,"Now, you need to generate graphql VueJS smart queries code to use Hypi APIs within the VueJS project. "),(0,r.kt)("p",null,"Inside ",(0,r.kt)("inlineCode",{parentName:"p"},"src/graphql")," folder, add files related to GraphQl queries and mutations."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Here is the sample Product Query file to find all data : ",(0,r.kt)("inlineCode",{parentName:"li"},"src/graphql/products.graphql"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"query products($arcql: String!) {\n    find(type: Product, arcql: $arcql) {\n        edges {\n            node {\n               ...ProductFields\n            }\n        }\n    }\n}\n\nfragment ProductFields on Product {\n   hypi {\n        id\n    }\n    title\n    description\n}    \n")),(0,r.kt)("p",null,"You may replace the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Product")," with your own data type and fields like ",(0,r.kt)("inlineCode",{parentName:"p"},"title/description")," with your own fields."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now, add Products Mutation: ",(0,r.kt)("inlineCode",{parentName:"li"},"src/graphql/products-mutation.graphql"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mutation updateProducts($values:HypiUpsertInputUnion!) {\n  upsert(values:$values)\n    {\n        id\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You may also retrieve a single product using ",(0,r.kt)("inlineCode",{parentName:"li"},"get")," query. Add ",(0,r.kt)("inlineCode",{parentName:"li"},"get")," query:  `src/graphql/get-product.graphql")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"query getProduct($id: String!) {\n    get(type: Product, id: $id) {\n           ...ProductFields\n    }\n}\n\nfragment ProductFields on Product {\n   hypi {\n        id\n    }\n    title\n    description\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add delete mutation: ",(0,r.kt)("inlineCode",{parentName:"li"},"src/graphql/delete-product.graphql"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mutation delete( \n$arcql: String!\n$clearArrayReferences: Boolean = false) {\n  delete(type: Product, arcql: $arcql, clearArrayReferences: $clearArrayReferences)\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"After adding the graphql queries and mutations, use the ",(0,r.kt)("inlineCode",{parentName:"li"},"generate")," command to generate the VueJS 2 smart queries graphql code so that you can use Hypi APIs within your project.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"USAGE\n  $ hypi generate [PLATFORM]\n\nOPTIONS\n  -h, --help                              show CLI help\n  -p, --platform=flutter|reactjs|angular\n\nEXAMPLES\n  $ hypi generate angular\n  $ hypi generate -p=angular\n  $ hypi generate --platform=angular\n\n")),(0,r.kt)("p",null,"You will be asked whether to generate code for smart queries or composition API. Choose smart queries. After running the command, ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql.ts")," files get created in the ",(0,r.kt)("inlineCode",{parentName:"p"},"\\src\\generated")," folder. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"hypi generate vuejs\n? What generation type you would like  Smart Queries\nGenerate Process... done\nThe file was succesfully generated!\n")),(0,r.kt)("p",null,"Inside ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql.ts")," file, you will find vuejs smart queries to be used inside your VueJS components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const useGetProductQuery = createSmartQueryOptionsFunction<\n  GetProductQuery,\n  GetProductQueryVariables,\n  ApolloError\n>(GetProductDocument);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const updateProductsMutation = createMutationFunction<\n  UpdateProductsMutation,\n  UpdateProductsMutationVariables,\n  ApolloError\n>(UpdateProductsDocument);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const deleteMutation = createMutationFunction<\n  DeleteMutation,\n  DeleteMutationVariables,\n  ApolloError\n>(DeleteDocument);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export const useProductsQuery = createSmartQueryOptionsFunction<\n  ProductsQuery,\n  ProductsQueryVariables,\n  ApolloError\n>(ProductsDocument);\n")),(0,r.kt)("p",null,"Now, you are ready to create your VueJS smart queries application using Hypi APIs!"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To use various Hypi APIs like CRUD, you will have to write the related graphql queries in ","*",".graphl files inside  ",(0,r.kt)("inlineCode",{parentName:"p"},"src/graphql")," folder. Please check various APIs ",(0,r.kt)("a",{parentName:"p",href:"https://docs.hypi.app/docs/api-references"},"here"),"."))),(0,r.kt)("h3",{id:"using-graphql-queries"},"Using GraphQL queries"),(0,r.kt)("p",null,"Inside ",(0,r.kt)("inlineCode",{parentName:"p"},"src/views")," folder, add Product or your own data type component. AddProduct.vue, EditProduct.vue, Product.vue files. These files will access the graphql queries and mutations using the created smart queries. You may modify these files to use your own queries."),(0,r.kt)("p",null,"Let's try to understand the queries in the files."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First, we import the queries from ",(0,r.kt)("inlineCode",{parentName:"li"},"graphql.ts")," file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"import\xa0{\xa0updateProductsMutation\xa0}\xa0from'../generated/graphql';\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Declare ",(0,r.kt)("inlineCode",{parentName:"li"},"useProductsQuery")," providing the ",(0,r.kt)("a",{parentName:"li",href:"https://docs.hypi.app/docs/arcql"},"arcql statements"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"export default {\n  apollo: {\n    products: useProductsQuery({\n      variables: {\n        arcql: '*',\n      },\n      loadingKey: 'loading',\n      update: (data) => data.find.edges,\n    }),\n  },\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Insert data using the ",(0,r.kt)("inlineCode",{parentName:"li"},"updateProductsMutation"),". ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"  const { success, errors } = await updateProductsMutation(\n        this,\n        {\n          variables: {\n            values: {\n              Product: [\n                {\n                  title: productTitle,\n                  description: productDescription,\n                  price: productPrice,\n                },\n              ],\n            },\n          },\n        },\n        this.$apollo,\n      );\n")),(0,r.kt)("h3",{id:"authentication-using-apollo-client"},"Authentication using Apollo Client"),(0,r.kt)("p",null,"To make an HTTP connection to Hypi Endpoint, we use Apollo client. Following code demonstrates how to make this connection. This code has been added in the ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const authToken = config.token;\nconst { domain } = config;\n\nconst apolloClient = new ApolloClient({\n  uri: `${config.default_api_domain}/graphql`,\n  headers: {\n    Authorization: `Bearer ${authToken}`,\n    'hypi-domain': `${domain}`,\n  },\n});\n\nVue.use(VueApollo);\n")),(0,r.kt)("p",null,"Run the application using ",(0,r.kt)("inlineCode",{parentName:"p"},"npm run serve")," command. "),(0,r.kt)("p",null,"This is the simplest way to use Hypi GraphQL queries and Mutations inside VueJS smart queries application!"))}d.isMDXComponent=!0}}]);