"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3607],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1332:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},8515:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(7462),r=n(7294),o=n(2389),i=n(5394),l=n(6010),s="tabItem_tAz6";function u(e){var t,n,o,u=e.lazy,p=e.block,c=e.defaultValue,d=e.values,h=e.groupId,m=e.className,f=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=d?d:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,i.lx)(v,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===c?c:null!=(t=null!=c?c:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=f[0])?void 0:o.props.value;if(null!==y&&!v.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=(0,i.UB)(),w=b.tabGroupChoices,k=b.setTabGroupChoices,N=(0,r.useState)(y),q=N[0],T=N[1],O=[],L=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=h){var I=w[h];null!=I&&I!==q&&v.some((function(e){return e.value===I}))&&T(I)}var Q=function(e){var t=e.currentTarget,n=O.indexOf(t),a=v[n].value;a!==q&&(L(t),T(a),null!=h&&k(h,a))},G=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=O.indexOf(e.currentTarget)+1;n=O[a]||O[0];break;case"ArrowLeft":var r=O.indexOf(e.currentTarget)-1;n=O[r]||O[O.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":p},m)},v.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:q===t?0:-1,"aria-selected":q===t,key:t,ref:function(e){return O.push(e)},onKeyDown:G,onFocus:Q,onClick:Q},o,{className:(0,l.Z)("tabs__item",s,null==o?void 0:o.className,{"tabs__item--active":q===t})}),null!=n?n:t)}))),u?(0,r.cloneElement)(f.filter((function(e){return e.props.value===q}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==q})}))))}function p(e){var t=(0,o.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},2097:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=n(8515),l=n(1332),s=["components"],u={id:"gql-introduction",title:"GraphQL Introduction",sidebar_label:"GraphQL Introduction",slug:"/lowcode/gql-introduction"},p=void 0,c={unversionedId:"lowcode/gql-introduction",id:"lowcode/gql-introduction",title:"GraphQL Introduction",description:"What is GraphQL?",source:"@site/content/lowcode/gql-introduction.md",sourceDirName:"lowcode",slug:"/lowcode/gql-introduction",permalink:"/docs/lowcode/gql-introduction",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/lowcode/gql-introduction.md",tags:[],version:"current",frontMatter:{id:"gql-introduction",title:"GraphQL Introduction",sidebar_label:"GraphQL Introduction",slug:"/lowcode/gql-introduction"},sidebar:"docs",previous:{title:"GraphQL Overview",permalink:"/docs/lowcode/graphql"},next:{title:"GraphQL Schema and Types",permalink:"/docs/lowcode/gql-schema-types"}},d=[{value:"What is GraphQL?",id:"what-is-graphql",children:[],level:2},{value:"Why GraphQL?",id:"why-graphql",children:[{value:"Ship Apps faster adopting GraphQL and Hypi",id:"ship-apps-faster-adopting-graphql-and-hypi",children:[],level:3},{value:"Explore your API",id:"explore-your-api",children:[],level:3}],level:2}],h={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"what-is-graphql"},"What is GraphQL?"),(0,o.kt)("p",null,"GraphQL was created by Facebook to enhance RESTful API calls."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"GraphQL")," makes getting server information much more comfortable and a lot faster. A GraphQL ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," gets parsed to a string. The string is sent to a server to be interpreted and fulfilled. The server returns JSON to the client."),(0,o.kt)(i.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"query",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"{\n   Songs {\n     name\n     # Queries can have comments!\n     author\n     year\n   }\n} \n"))),(0,o.kt)(l.Z,{value:"response",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n       "data": {\n         "songs": [\n           {\n              "name": "It\'s A Beautiful Day",\n              "author": "Queen",\n              "year":"1995",\n           },\n           {\n              "name": "Let\'s Make A Night To Remember",\n              "author": "Bryan Adams",\n              "year": "1996"\n           }\n           ]\n         }\n       \n }\n')))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"GraphQL queries mirror their response"),", making it easy to predict the shape of the data returned from a query. It is also easy to write a query if you know the data your app needs."),(0,o.kt)("p",null,"GraphQL is unapologetic in its approach. It is driven by the data requirements of products and developers who build the products. Because of the predictability of GraphQL, it's easy to learn and use."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"GraphQL is not a database query language or a storage model. It contains graphs, nodes, and edges. The graph refers to graph structures specified in the schema. Within the graph, nodes represent objects and edges represent connections linking objects. GraphQL APIs traverses through the graph and returns application data based on the schema definitions, independent of how the data is stored."))),(0,o.kt)("h2",{id:"why-graphql"},"Why GraphQL?"),(0,o.kt)("p",null,"Hypi chose GraphQL because it includes both a query language and schema definition language (SDL). That is why our customers can precisely define the data, structure, and relationships they need."),(0,o.kt)("h3",{id:"ship-apps-faster-adopting-graphql-and-hypi"},"Ship Apps faster adopting GraphQL and Hypi"),(0,o.kt)("p",null,"Managing data for the modern applications can present many challenges. Developers are aggregating data from multiple sources that they need to merge into an app's UI. Furthermore, developers are deciding how to manage state on the client, simultaneously executing complex features such as caching and optimistic UI."),(0,o.kt)("p",null,"Adopting Hypi in your organisation will ease these pain points considerably. Using GraphQL's declarative approach to data modelling and fetching will simplify data transformation and speed up your API and app development. Using the Hypi platform enables faster development cycles thanks to its ability to understand a GraphQL model's relationships. Hypi generates most (in some cases all) of the backend APIs instantly."),(0,o.kt)("h3",{id:"explore-your-api"},"Explore your API"),(0,o.kt)("p",null,"Hypi loves GraphQL's strongly typed query language because it enables developers to take advantage of incredible tooling for exploring App Instance APIs. Developers can query a Release schema for information about what queries and types it supports. Introspection is at your fingertips with automatic documentation, autocomplete, and more."))}m.isMDXComponent=!0}}]);