"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7977],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=i,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},45747:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),o=["components"],s={id:"api-rate-limits",title:"API Rate Limits",sidebar_label:"API Rate Limits",slug:"/lowcode/api-rate-limits"},l=void 0,p={unversionedId:"lowcode/api-rate-limits",id:"lowcode/api-rate-limits",title:"API Rate Limits",description:"API Rate Limits refer to the number of API requests a user can make to the Server within a given period. The Rate Limits vary as per the subscribed plans and the type of requests.",source:"@site/content/lowcode/api-rate-limits.md",sourceDirName:"lowcode",slug:"/lowcode/api-rate-limits",permalink:"/docs/lowcode/api-rate-limits",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/lowcode/api-rate-limits.md",tags:[],version:"current",frontMatter:{id:"api-rate-limits",title:"API Rate Limits",sidebar_label:"API Rate Limits",slug:"/lowcode/api-rate-limits"},sidebar:"docs",previous:{title:"Password Reminder",permalink:"/docs/lowcode/password-reminder"},next:{title:"Overview",permalink:"/docs/lowcode/serverless"}},c=[],u={toc:c};function m(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"API Rate Limits")," refer to ",(0,a.kt)("strong",{parentName:"p"},"the number of API requests a user can make to the Server within a given period"),". The Rate Limits vary as per the subscribed plans and the type of requests."),(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"API Rate Limit")," gets exceeded, then check for the ",(0,a.kt)("strong",{parentName:"p"},"standard 429 status code and HTTP header")," beginning with ",(0,a.kt)("inlineCode",{parentName:"p"},"X-Hypi-")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"x-hypi-apirequest-rate-limit-remaining: 18\nx-hypi-apirequest-rate-limit-retry-after-seconds: 0\nx-hypi-file-rate-limit-remaining: 50000000\nx-hypi-file-rate-limit-retry-after-seconds: 0\nx-hypi-networkin-rate-limit-remaining: 252349763\nx-hypi-networkin-rate-limit-retry-after-seconds: 0\nx-hypi-networkout-rate-limit-remaining: 243087069\nx-hypi-networkout-rate-limit-retry-after-seconds: 2666416\nx-hypi-row-rate-limit-remaining: 999266\nx-hypi-row-rate-limit-retry-after-seconds: 2666416532000000\nx-hypi-serverless-rate-limit-remaining: 3600000\nx-hypi-serverless-rate-limit-retry-after-seconds: 0\n")),(0,a.kt)("p",null,"Let's check the terminologies being used in the above response."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"retry-after-seconds"),":  The number of seconds before you can retry the request"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"remaining"),": Remaining amount from the request Rate Limit")),(0,a.kt)("p",null,"The Rate Limit is applicable for the following parameters or type of requests:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"apirequest"),": The number of API requests users can send to a single instance within a month or 31 days. "),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"requestsPerSecond"),": The number of requests that can be sent within 1 second. "),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"row"),": The number of records that can be upserted across all data types within a single instance. If you exceed this limit, you may delete old records and upsert new records."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"file"),": The number of bytes of data that can be uploaded using the files within a single instance."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"networkin"),":  The amount of data that can be sent through a single request. For a query, the incoming data towards the server may be in a few bytes. While uploading a file, this amount will include the size of the file."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"networkout")," : The amount of data that can be retrieved from a single response to a particular request. "),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"serverless"),": Execution time of the serverless functions. The time spent executing a serverless function gets recorded. If the time limit exceeds, then the user gets an error with a 429 status code. ")),(0,a.kt)("p",null,"For current pricing and rate limits for the above parameters, see ",(0,a.kt)("a",{parentName:"p",href:"https://hypi.io"},"hypi.io"),"."))}m.isMDXComponent=!0}}]);