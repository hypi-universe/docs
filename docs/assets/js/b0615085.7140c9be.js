"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8554],{3905:function(e,t,n){n.d(t,{Zo:function(){return g},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},g=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=s(n),c=r,m=u["".concat(p,".").concat(c)]||u[c]||d[c]||i;return n?a.createElement(m,o(o({ref:t},g),{},{components:n})):a.createElement(m,o({ref:t},g))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},80213:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return g},default:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={id:"time-series-aggregations",title:"Timeseries Aggregations with Date Granularity",sidebar_label:"Timeseries Aggregations with Date Granularity",slug:"/lowcode/time-series-aggregations"},p=void 0,s={unversionedId:"lowcode/time-series-aggregations",id:"lowcode/time-series-aggregations",title:"Timeseries Aggregations with Date Granularity",description:"Timeseries Aggregations can be performed on the dateTime field. So, you may group the records based upon thedateTimefield and perform aggregations on them. Hypi object has the dateTime fields likehypicreated or hypiupdated. You may use these fields for timeseries aggregations.",source:"@site/content/lowcode/time-series-aggregations.md",sourceDirName:"lowcode",slug:"/lowcode/time-series-aggregations",permalink:"/docs/lowcode/time-series-aggregations",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/lowcode/time-series-aggregations.md",tags:[],version:"current",frontMatter:{id:"time-series-aggregations",title:"Timeseries Aggregations with Date Granularity",sidebar_label:"Timeseries Aggregations with Date Granularity",slug:"/lowcode/time-series-aggregations"},sidebar:"docs",previous:{title:"Hypi GraphQL CRUD Tutorial",permalink:"/docs/lowcode/gql-crud-tutorial"},next:{title:"Create App",permalink:"/docs/lowcode/ui-create-app"}},g=[{value:"Aggregation Types",id:"aggregation-types",children:[],level:2},{value:"Using GroupBy with dateGranularity",id:"using-groupby-with-dategranularity",children:[],level:2}],d={toc:g};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Timeseries Aggregations can be performed on the ",(0,i.kt)("inlineCode",{parentName:"p"},"dateTime")," field. So, you may group the records based upon the",(0,i.kt)("inlineCode",{parentName:"p"},"dateTime"),"field and perform aggregations on them. Hypi object has the dateTime fields like",(0,i.kt)("inlineCode",{parentName:"p"},"hypi_created")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"hypi_updated"),". You may use these fields for timeseries aggregations."),(0,i.kt)("p",null,"In this tutorial, we will work with the following schema to demonstrate how to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"dateGranularity")," parameter to group numeric fields over time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"type ActorRatings {\n    rating: Float!\n    gender: Gender!\n}\nenum Gender {\n    Male\n    Female\n    NotSpecified\n}\n")),(0,i.kt)("p",null,"First is looking into the types that you want to aggregate."),(0,i.kt)("h2",{id:"aggregation-types"},"Aggregation Types"),(0,i.kt)("p",null,'For each type in our schema, we have two aggregations that we can perform on them. The first one is named "',"[","our","_","type","]",'" and the second one is named "',"[","our","_","type","]",'With". Check more about Aggregations ',(0,i.kt)("a",{parentName:"p",href:"/docs/lowcode/aggregation"},"here"),"."),(0,i.kt)("p",null,"Looking at our schema, our aggregations will be"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"actorRatings(\n    where: String\n): ActorRatingsAggs\n")),(0,i.kt)("p",null,"and"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"actorRatingsWith(\n    where: String\n    groupBy: [ActorRatingsGroupByOptions!]!\n    having: String\n    first: Int\n    after: String\n    last: Int\n    before: String\n    includeTrashed: Boolean\n): [ActorRatingsAggs]\n")),(0,i.kt)("p",null,"In this tutorial we will focus on using",(0,i.kt)("inlineCode",{parentName:"p"},"actorRatingsWith"),"since it is the one that allows grouping data."),(0,i.kt)("h2",{id:"using-groupby-with-dategranularity"},"Using GroupBy with dateGranularity"),(0,i.kt)("p",null,"Now, let's get into some examples."),(0,i.kt)("p",null,"Let's retrieve the ",(0,i.kt)("strong",{parentName:"p"},"average")," ",(0,i.kt)("inlineCode",{parentName:"p"},"rating")," ",(0,i.kt)("strong",{parentName:"p"},"for each day")," for the actor with",(0,i.kt)("inlineCode",{parentName:"p"},"hypi.id='actor1'"),". The aggregation looks like this."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"{\n  aggregate {\n    actorRatingsWith(\n      where: \"hypi.id='actor1'\"\n      groupBy: [{ field: hypi_created, dateGranularity: DAYS }]) {\n      rating {\n        avg\n        groupValues{\n          key\n          value\n        }\n      }\n    }\n  }\n}\n")),(0,i.kt)("p",null,"Here we are using the ",(0,i.kt)("inlineCode",{parentName:"p"},"actorRatingsWith")," aggregation with the ",(0,i.kt)("inlineCode",{parentName:"p"},"groupBy")," parameter pointing at the field ",(0,i.kt)("inlineCode",{parentName:"p"},"hypi_created")," and passing the ",(0,i.kt)("inlineCode",{parentName:"p"},"dateGranularity: DAYS")," parameter to indicate that we want to group by the ",(0,i.kt)("inlineCode",{parentName:"p"},"hypi_created")," field and have the results grouped  ",(0,i.kt)("strong",{parentName:"p"},"specifically"),"  by the  ",(0,i.kt)("strong",{parentName:"p"},"days"),"."),(0,i.kt)("p",null,"As for the data we want to be returned, we specify",(0,i.kt)("inlineCode",{parentName:"p"},"avg"),"and then the",(0,i.kt)("inlineCode",{parentName:"p"},"groupValues"),"so we can know the ",(0,i.kt)("strong",{parentName:"p"},"value of the field")," we are grouping by -",(0,i.kt)("inlineCode",{parentName:"p"},"hypi_created"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Required Selections:")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Note that the groupValues field is a mandatory selection when using the dateGranularity parameter. This means it ",(0,i.kt)("em",{parentName:"p"},"MUST")," be one of the fields you select. Otherwise you will receive an error."))),(0,i.kt)("p",null,"The result will look like this."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "aggregate": {\n      "actorRatingsWith": [\n        {\n          "rating": {\n            "avg": 4.5,\n            "groupValues": [\n              {\n                "key": "hypi_created",\n                "value": "2020-07-09"\n              }\n            ]\n          }\n        },\n        {\n          "rating": {\n            "avg": 4.2,\n            "groupValues": [\n              {\n                "key": "hypi_created",\n                "value": "2020-07-10"\n              }\n            ]\n          }\n        },\n        {\n          "rating": {\n            "avg": 3.3,\n            "groupValues": [\n              {\n                "key": "hypi_created",\n                "value": "2020-07-11"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n')),(0,i.kt)("p",null,"As you can see, the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," field of the ",(0,i.kt)("inlineCode",{parentName:"p"},"groupValues"),", is displaying dates with different days and the ",(0,i.kt)("strong",{parentName:"p"},"average")," is calculated for that day."),(0,i.kt)("p",null,"Similarly we can use all the other aggregations: ",(0,i.kt)("inlineCode",{parentName:"p"},"count")," , ",(0,i.kt)("inlineCode",{parentName:"p"},"min")," , ",(0,i.kt)("inlineCode",{parentName:"p"},"max")," , ",(0,i.kt)("inlineCode",{parentName:"p"},"sum"),"."),(0,i.kt)("p",null,"Also, just as we did ",(0,i.kt)("inlineCode",{parentName:"p"},"DAYS")," for the ",(0,i.kt)("inlineCode",{parentName:"p"},"dateGranularity")," in this tutorial, you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"HOURS")," , ",(0,i.kt)("inlineCode",{parentName:"p"},"MINUTES")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"SECONDS")," as for your needs."),(0,i.kt)("p",null,"In conclusion, aggregations using ",(0,i.kt)("inlineCode",{parentName:"p"},"dateGranularity")," boils down to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'Using the right aggregation type - which is named "',"[","your_type","]",'With".'),(0,i.kt)("li",{parentName:"ol"},"Using",(0,i.kt)("inlineCode",{parentName:"li"},"groupBy"),"to specify which ",(0,i.kt)("strong",{parentName:"li"},"field")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"dateGranularity")," you would like to group by. In our example ",(0,i.kt)("inlineCode",{parentName:"li"},"hypi_created")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"DAYS"),"."),(0,i.kt)("li",{parentName:"ol"},"Using ",(0,i.kt)("inlineCode",{parentName:"li"},"where")," if you want to filter before calculating.  (It is an ",(0,i.kt)("a",{parentName:"li",href:"/docs/lowcode/arcql"},"ArcQL")," string. In our example -",(0,i.kt)("inlineCode",{parentName:"li"},"hypi.id='actor1'"),".)"),(0,i.kt)("li",{parentName:"ol"},"Adding the field that you want to aggregate. In our example ",(0,i.kt)("inlineCode",{parentName:"li"},"rating"),"."),(0,i.kt)("li",{parentName:"ol"},"Choosing what you want to calculate. In our example ",(0,i.kt)("inlineCode",{parentName:"li"},"avg"),"(others include ",(0,i.kt)("inlineCode",{parentName:"li"},"count")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"min")," , ",(0,i.kt)("inlineCode",{parentName:"li"},"max")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"sum"),")"),(0,i.kt)("li",{parentName:"ol"},"Adding ",(0,i.kt)("inlineCode",{parentName:"li"},"groupValues")," so you can see the ",(0,i.kt)("strong",{parentName:"li"},"value of the field")," that you grouped by in the ",(0,i.kt)("strong",{parentName:"li"},"result set"),".")))}u.isMDXComponent=!0}}]);