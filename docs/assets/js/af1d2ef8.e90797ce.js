"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9326],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),h=r,m=c["".concat(p,".").concat(h)]||c[h]||d[h]||o;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},97087:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return c}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),l=["components"],i={id:"gql-crud-tutorial",title:"Hypi GraphQL CRUD Tutorial",sidebar_label:"Hypi GraphQL CRUD Tutorial",slug:"/lowcode/gql-crud-tutorial"},p=void 0,s={unversionedId:"lowcode/gql-crud-tutorial",id:"lowcode/gql-crud-tutorial",title:"Hypi GraphQL CRUD Tutorial",description:"In this tutorial, let's check how to use GraphQL APIs to perform CRUD operations on your app.",source:"@site/content/lowcode/gql-crud-tutorial.md",sourceDirName:"lowcode",slug:"/lowcode/gql-crud-tutorial",permalink:"/docs/lowcode/gql-crud-tutorial",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/lowcode/gql-crud-tutorial.md",tags:[],version:"current",frontMatter:{id:"gql-crud-tutorial",title:"Hypi GraphQL CRUD Tutorial",sidebar_label:"Hypi GraphQL CRUD Tutorial",slug:"/lowcode/gql-crud-tutorial"},sidebar:"docs",previous:{title:"Tutorials Overview",permalink:"/docs/lowcode/tutorials"},next:{title:"Timeseries Aggregations with Date Granularity",permalink:"/docs/lowcode/time-series-aggregations"}},u=[{value:"Create",id:"create",children:[],level:2},{value:"Update",id:"update",children:[],level:2},{value:"Read",id:"read",children:[],level:2},{value:"Delete",id:"delete",children:[],level:2}],d={toc:u};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this tutorial, let's check how to use GraphQL APIs to perform CRUD operations on your app."),(0,o.kt)("p",null,"For the purpose of this tutorial, we\u2019ve created an app with the name ",(0,o.kt)("inlineCode",{parentName:"p"},"hypi-tutorials"),", and in the  ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQL Editor")," we\u2019ve created a simple ",(0,o.kt)("strong",{parentName:"p"},"schema")," for our application. Check ",(0,o.kt)("a",{parentName:"p",href:"/docs/lowcode/ui-create-table-gse"},"here")," how to add schema using GraphQL Editor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"interface Employee{\n    name: String!\n    age: Int!\n    colleagues: [Employee!]\n}\n\ntype Actor implements Employee{\n    name: String!\n    age: Int!\n    colleagues: [Employee!]\n    starsIn: [Episode!]\n}\n\ntype Director implements Employee{\n    name: String!\n    age: Int!\n    colleagues: [Employee!]\n    hasDirected: [Episode!]\n}\n\nenum Episode{\n    S01E01\n    S01E02\n    S01E03\n    S01E04\n    S01E05\n    S01E06\n}\n")),(0,o.kt)("p",null,"Now, with a created instance of the app, navigate to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/lowcode/ui-gql-playground"},"GraphQL Playground")," of the instance, or do it programmatically with a http request to:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"#"},"https://api.hypi.app/graphql")),(0,o.kt)("p",null,"with the http headers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'"Authorization": "", - your authorization token\n"hypi-domain": "" \u2013the domain of your Hypi app\n')),(0,o.kt)("p",null,"Let\u2019s start performing some operations on your Hypi app. For the purpose of this tutorial, we will use the  ",(0,o.kt)("strong",{parentName:"p"},"GraphQL Playground")),(0,o.kt)("p",null,"Please check Documentation for the GraphQL  ",(0,o.kt)("a",{parentName:"p",href:"/docs/lowcode/gql-queries"},"queries")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/lowcode/gql-mutations"},"mutations")," mentioned in this tutorial."),(0,o.kt)("h2",{id:"create"},"Create"),(0,o.kt)("p",null,"For this tutorial, we will create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Actor")," object with the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," \u201cWill Smith\u201d, ",(0,o.kt)("inlineCode",{parentName:"p"},"age")," 17, and he stars in episodes 1, 2 and 3. To create an object we will use ",(0,o.kt)("inlineCode",{parentName:"p"},"upsert")," method. The mutation will look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'mutation {\n    upsert(values: {\n            Actor: {\n            name: "Will Smith",\n            age: 17,\n            starsIn: [S01E01, S01E02, S01E03]\n            }\n        }\n    ) {\n        id\n    }\n}\n')),(0,o.kt)("p",null,"As you can see, if you are familiar with ",(0,o.kt)("strong",{parentName:"p"},"GraphQL")," , the call is pretty simple, you pass in the object that you want to create as a ",(0,o.kt)("inlineCode",{parentName:"p"},"values")," parameter to the ",(0,o.kt)("inlineCode",{parentName:"p"},"upsert")," mutation, and specify what fields of the ",(0,o.kt)("a",{parentName:"p",href:"/docs/lowcode/magic-hypi-object"},"Magic Hypi object")," you want in the response."),(0,o.kt)("p",null,"You can look into all of the fields that the ",(0,o.kt)("strong",{parentName:"p"},"Magic Hypi object")," contains under its section in the Hypi GraphQL API documentation, here we just return the ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,o.kt)("p",null,"As expected, the response looks like this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'{\n  "data": {\n    "upsert": [\n      {\n        "id": "01ED4X75AG1G96PDC8A231KTC8"\n      }\n    ]\n  }\n}\n')),(0,o.kt)("p",null,"So, we have successfully used the ",(0,o.kt)("inlineCode",{parentName:"p"},"upsert")," method to create an ",(0,o.kt)("inlineCode",{parentName:"p"},"Actor")," in our database."),(0,o.kt)("p",null,"Next, let\u2019s see how we can update that actor."),(0,o.kt)("h2",{id:"update"},"Update"),(0,o.kt)("p",null,"To update an existing value, we should provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"hypi.id"),"for the object along with the data that we want to save for that object."),(0,o.kt)("p",null,"Let\u2019s say that we want to update the ",(0,o.kt)("inlineCode",{parentName:"p"},"age")," of the actor we just created."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"mutation")," will look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'mutation {\n    upsert(values: {\n            Actor: {\n                age: 18,\n                hypi: {\n                    id: "01ED4X75AG1G96PDC8A231KTC8"\n                }\n            }\n        }\n    ) {\n        id\n    }\n}\n')),(0,o.kt)("p",null,"As you can see, the difference between the create and the update is that the update contains"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'hypi: {\n    id: "01ED4X75AG1G96PDC8A231KTC8"\n}\n')),(0,o.kt)("p",null,"Here, hypi object ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," is the one that we got back in the create response . As expected, the response remains the same as ",(0,o.kt)("inlineCode",{parentName:"p"},"Create"),"."),(0,o.kt)("h2",{id:"read"},"Read"),(0,o.kt)("p",null,"For reading the data, we will show you two queries (",(0,o.kt)("inlineCode",{parentName:"p"},"get")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"find"),") that Hypi provides out of the box for any object."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"get()"))),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"get")," ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," provides a way to get a single object by its ",(0,o.kt)("inlineCode",{parentName:"p"},"hypi.id"),". The query will be like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'query {\n    get(type: Actor, id: "01ED4X75AG1G96PDC8A231KTC8") {\n        ... on Actor {\n            name\n            age\n        }\n    }\n}\n')),(0,o.kt)("p",null,"As you can see the get query accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," as parameters and it returns whatever fields you specify for the type that you are using it for."),(0,o.kt)("p",null,"The response from this query will be"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'{\n  "data": {\n    "get": {\n      "name": "Will Smith",\n      "age": 18\n    }\n  }\n}\n')),(0,o.kt)("p",null,"As expected, we got the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"age")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Actor")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," \u201c01ED4X75AG1G96PDC8A231KTC8\u201d."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"find()"))),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"find")," ",(0,o.kt)("inlineCode",{parentName:"p"},"query")," is used to search through your data.  For the purpose of this tutorial, we\u2019ve created a few more actors in the database."),(0,o.kt)("p",null,"The find query accepts two mandatory parameters ",(0,o.kt)("inlineCode",{parentName:"p"},"Type")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"arcql"),".  The ",(0,o.kt)("inlineCode",{parentName:"p"},"Type")," is the type of object you want to query, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"arcql")," parameter is the query that you want to use for searching though the data."),(0,o.kt)("p",null,"To learn more about ",(0,o.kt)("strong",{parentName:"p"},"Arcql")," , please refer ",(0,o.kt)("a",{parentName:"p",href:"/docs/lowcode/arcql"},"ArcQl filtering"),"."),(0,o.kt)("p",null,"In this tutorial, we will cover listing of all of the actors and searching them by ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,o.kt)("p",null,"For getting all of the actors we will send the wildcard \u201c","*","\u201d as the ",(0,o.kt)("inlineCode",{parentName:"p"},"arcql")," parameter, indicating that we want all of the actors. In the response, we want the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," of the actor along with his ",(0,o.kt)("inlineCode",{parentName:"p"},"hypi.id"),". The query will look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'query {\n    find(type: Actor, arcql: "*") {\n        ... on HypiFilterConnection {\n            edges {\n                node {\n                    ... on Actor {\n                        name\n                        hypi {\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n')),(0,o.kt)("p",null,"As expected, the response is a list of all of the edges of type ",(0,o.kt)("inlineCode",{parentName:"p"},"Actor")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Will Smith",\n            "hypi": {\n              "id": "01ED4X75AG1G96PDC8A231KTC8"\n            }\n          }\n        },\n        {\n          "node": {\n            "name": "Alfonso Ribeiro",\n            "hypi": {\n              "id": "01ED4ZCASYQ57YK2VV3WCM3D0E"\n            }\n          }\n        },\n        {\n          "node": {\n            "name": "Will Werrell",\n            "hypi": {\n              "id": "01ED506E9GQ3Z75RHE0609RNYN"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n')),(0,o.kt)("p",null,"Next, we will use ",(0,o.kt)("strong",{parentName:"p"},"Arcql")," to create a typical auto-complete query for the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," field. The arcql will look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u201cname ^ \u2018Will\u2019\u201d\n")),(0,o.kt)("p",null,"And the query will look like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"query {\n    find(type: Actor, arcql: \"name ^ 'Will'\") {\n        ... on HypiFilterConnection {\n            edges {\n                node {\n                    ... on Actor {\n                        name\n                        hypi {\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n")),(0,o.kt)("p",null,"As expected, the response contains only the actors with the names starting with \u2018Will\u2019"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Will Smith",\n            "hypi": {\n              "id": "01ED4X75AG1G96PDC8A231KTC8"\n            }\n          }\n        },\n        {\n          "node": {\n            "name": "Will Werrell",\n            "hypi": {\n              "id": "01ED506E9GQ3Z75RHE0609RNYN"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n')),(0,o.kt)("h2",{id:"delete"},"Delete"),(0,o.kt)("p",null,"Hypi offers ",(0,o.kt)("strong",{parentName:"p"},"soft delete")," and ",(0,o.kt)("strong",{parentName:"p"},"hard delete")," of objects."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Soft Delete"))),(0,o.kt)("p",null,"Soft deleting an object in the ",(0,o.kt)("strong",{parentName:"p"},"Hypi Universe")," , is referred to as  \u2018trashing\u2019 an object."),(0,o.kt)("p",null,"The field \u201ctrashed\u201d, which is a part of the ",(0,o.kt)("strong",{parentName:"p"},"Magic Hypi object")," is used to track that."),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"trash")," ",(0,o.kt)("inlineCode",{parentName:"p"},"mutation")," accepts two parameters, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Type")," of the object and an ",(0,o.kt)("inlineCode",{parentName:"p"},"arcql")," query. It will trash up to 25 of the objects that match the query. The mutation call looks like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"mutation {\n    trash(type: Actor, arcql: \"hypi.id='01ED4X75AG1G96PDC8A231KTC8'\")\n}\n")),(0,o.kt)("p",null,"The trash mutation returns the number of trashed items"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "trash": 1\n  }\n}\n')),(0,o.kt)("p",null,"We can verify that the item has been trashed by calling the ",(0,o.kt)("strong",{parentName:"p"},"get")," query with the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," of the trashed object."),(0,o.kt)("p",null,"It should not return any data."),(0,o.kt)("p",null,"You can find include the trashed items in searches by calling find with the parameter",(0,o.kt)("inlineCode",{parentName:"p"},"\u201cincludeTrashed: True\u201d")),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"untrash")," ",(0,o.kt)("inlineCode",{parentName:"p"},"mutation")," accepts two parameters, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Type")," of the object and an ",(0,o.kt)("inlineCode",{parentName:"p"},"arcql")," query. It will untrash all of the objects that match the query. The 'get' query with the 'id' would return the data as before."),(0,o.kt)("p",null,"The mutation call looks like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"mutation {\n    untrash(type: Actor, arcql: \"hypi.id='01ED4X75AG1G96PDC8A231KTC8'\")\n}\n")),(0,o.kt)("p",null,"The untrash mutation returns the number of untrashed items"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "untrash": 1\n  }\n}\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Hard Delete"))),(0,o.kt)("p",null,"Hard delete is done by calling the ",(0,o.kt)("strong",{parentName:"p"},"delete")," ",(0,o.kt)("inlineCode",{parentName:"p"},"mutation"),". The delete mutation accepts two parameters, the",(0,o.kt)("inlineCode",{parentName:"p"},"Type"),"of the object and an ",(0,o.kt)("inlineCode",{parentName:"p"},"arcql")," query. It will delete up to 25 of the objects that match the query. The mutation call looks like this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"mutation {\n    delete(type: Actor, arcql: \"hypi.id='01ED4X75AG1G96PDC8A231KTC8'\")\n}\n")),(0,o.kt)("p",null,"The delete mutation returns the number of deleted items"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "delete": 1\n  }\n}\n')),(0,o.kt)("p",null,"Once an object has been hard deleted, there is no way to recover it."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"In this tutorial you learned about how to perform CRUD operations on your Hypi GraphQL API. Next you can navigate to your instance\u2019s GraphQL Playground and try these operations out for yourself!")))}c.isMDXComponent=!0}}]);