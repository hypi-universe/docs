"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6778],{3905:function(e,n,a){a.d(n,{Zo:function(){return p},kt:function(){return d}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=t.createContext({}),s=function(e){var n=t.useContext(u),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=s(e.components);return t.createElement(u.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=s(a),d=r,m=c["".concat(u,".").concat(d)]||c[d]||g[d]||o;return a?t.createElement(m,l(l({ref:n},p),{},{components:a})):t.createElement(m,l({ref:n},p))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1332:function(e,n,a){var t=a(7294);n.Z=function(e){var n=e.children,a=e.hidden,r=e.className;return t.createElement("div",{role:"tabpanel",hidden:a,className:r},n)}},8515:function(e,n,a){a.d(n,{Z:function(){return p}});var t=a(7462),r=a(7294),o=a(2389),l=a(5394),i=a(6010),u="tabItem_tAz6";function s(e){var n,a,o,s=e.lazy,p=e.block,g=e.defaultValue,c=e.values,d=e.groupId,m=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=c?c:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,l.lx)(f,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===g?g:null!=(n=null!=g?g:null==(a=h.find((function(e){return e.props.default})))?void 0:a.props.value)?n:null==(o=h[0])?void 0:o.props.value;if(null!==y&&!f.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,l.UB)(),b=k.tabGroupChoices,w=k.setTabGroupChoices,N=(0,r.useState)(y),T=N[0],x=N[1],A=[],C=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var j=b[d];null!=j&&j!==T&&f.some((function(e){return e.value===j}))&&x(j)}var O=function(e){var n=e.currentTarget,a=A.indexOf(n),t=f[a].value;t!==T&&(C(n),x(t),null!=d&&w(d,t))},E=function(e){var n,a=null;switch(e.key){case"ArrowRight":var t=A.indexOf(e.currentTarget)+1;a=A[t]||A[0];break;case"ArrowLeft":var r=A.indexOf(e.currentTarget)-1;a=A[r]||A[A.length-1]}null==(n=a)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":p},m)},f.map((function(e){var n=e.value,a=e.label,o=e.attributes;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return A.push(e)},onKeyDown:E,onFocus:O,onClick:O},o,{className:(0,i.Z)("tabs__item",u,null==o?void 0:o.className,{"tabs__item--active":T===n})}),null!=a?a:n)}))),s?(0,r.cloneElement)(h.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function p(e){var n=(0,o.Z)();return r.createElement(s,(0,t.Z)({key:String(n)},e))}},4257:function(e,n,a){a.r(n),a.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return g},toc:function(){return c},default:function(){return m}});var t=a(7462),r=a(3366),o=(a(7294),a(3905)),l=a(8515),i=a(1332),u=["components"],s={id:"aggregation",title:"Aggregation",sidebar_label:"Aggregation",slug:"/lowcode/aggregation"},p=void 0,g={unversionedId:"lowcode/aggregation",id:"lowcode/aggregation",title:"Aggregation",description:"Aggregation performs a calculation on a set of values and returns a single value. Aggregations are powerful functions. Their results provide insight into the gathered values in the database.",source:"@site/content/lowcode/aggregation.md",sourceDirName:"lowcode",slug:"/lowcode/aggregation",permalink:"/docs/lowcode/aggregation",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/lowcode/aggregation.md",tags:[],version:"current",frontMatter:{id:"aggregation",title:"Aggregation",sidebar_label:"Aggregation",slug:"/lowcode/aggregation"},sidebar:"docs",previous:{title:"API gateway",permalink:"/docs/lowcode/apigateway"},next:{title:"Maths APIs",permalink:"/docs/lowcode/maths-api"}},c=[{value:"Examples:",id:"examples",children:[{value:"Aggregate with No Filter",id:"aggregate-with-no-filter",children:[],level:3},{value:"Aggregate Distinct Rows",id:"aggregate-distinct-rows",children:[],level:3},{value:"Aggregate Matching Rows",id:"aggregate-matching-rows",children:[],level:3},{value:"Aggregate with groupBy",id:"aggregate-with-groupby",children:[],level:3},{value:"Aggregate by Date",id:"aggregate-by-date",children:[],level:3}],level:2}],d={toc:c};function m(e){var n=e.components,a=(0,r.Z)(e,u);return(0,o.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Aggregation performs a calculation on a set of values and returns a single value. Aggregations are powerful functions. Their results provide insight into the gathered values in the database."),(0,o.kt)("p",null,"You can aggregate any scalar field in at least one way. String fields can only be counted or grouped. But, you can perform aggregations on numerical fields like Integers and Floats. You can perform the following aggregations with Hypi."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"avg"),"\xa0- Calculates the average of a set of values from a field"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"count"),"\xa0- Counts the number of records from a field"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"sum"),"\xa0\u2013 Calculates the sum of a set of values from a field"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"max"),"\xa0\u2013 Returns maximum from a set of values"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"min"),"\xa0\u2013 Returns minimum from a set of values")),(0,o.kt)("p",null,"We will use the following schema to work with aggregate functions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"type Book {\n    authorid:\xa0Int\n    title:\xa0String\n    price:\xa0Float\n}\n\ntype Author\xa0{\n    name:\xa0String\n    age:\xa0Int\n    booklist:\xa0[Book!]\n}\n")),(0,o.kt)("h2",{id:"examples"},"Examples:"),(0,o.kt)("p",null,"Let\u2019s add some data in an object to perform aggregations."),(0,o.kt)(l.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Input Data",value:"data"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"query",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"mutation Upsert($values: HypiUpsertInputUnion!) {\n    upsert(values: $values) {\n    id\n    }\n}\n"))),(0,o.kt)(i.Z,{value:"data",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n "values": {\n "Author": [\n     {\n     "hypi": {"id": "Author1"},\n     "name": "Dan Brown",\n     "age": 56,\n     "booklist":[\n         {\n         "hypi": {"id": "Author1Book1"},\n         "title": "Da Vinci Code",\n         "price": 12.99,\n         "authorid": 1\n         },\n         {\n         "hypi": {"id": "Author1Book2"},\n         "title": "The Last Symbol",\n         "price": 10,\n         "authorid": 1\n         },\n         {\n         "hypi": {"id": "Author1Book3"},\n         "title": "Inferno",\n         "price": 5.99,\n         "authorid": 1\n         }\n         ]\n     },\n {\n     "hypi": {"id": "Author2"},\n     "name": "Paulo Coelho",\n     "age": 70,\n     "booklist":[\n         {\n         "hypi": {"id": "Author2Book1"},\n         "title": "Alchemist",\n         "price": 5.99,\n         "authorid": 2\n         },\n        {\n         "hypi": {"id": "Author2Book2"},\n         "title": "Warriors of light",\n         "price": 12.99,\n         "authorid": 2\n         }\n         ]\n     }\n   ]\n }\n}\n'))),(0,o.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n     "data": {\n     "upsert": [\n         {\n         "id": "Author1"\n         },\n         {\n         "id": "Author2"\n         }\n        ]\n    }\n}\n')))),(0,o.kt)("p",null,"Here author\u2019s age and price of the book are numerical fields. So, we would perform operations on these two fields. Aggregation operations can be performed with or without filters. Filters may have ",(0,o.kt)("inlineCode",{parentName:"p"},"distinct"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"group-by")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"where")," clauses, etc. They are similar to SQL-type database queries."),(0,o.kt)("h3",{id:"aggregate-with-no-filter"},"Aggregate with No Filter"),(0,o.kt)("p",null,"The below example demonstrates aggregation without any filters. Here, we are simply aggregating values from age and price fields. The function returns the average value, the number of records(count), minimum value, maximum value, and the sum of the values from both fields."),(0,o.kt)(l.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"query",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  aggregate {\n    author {\n      age {\n        avg\n        count\n        max\n        min\n        sum\n      }\n    }\n    book {\n      price {\n        avg\n        count\n        max\n        min\n        sum\n      }\n    }\n  }\n}\n"))),(0,o.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n     "aggregate": {\n         "author": {\n             "age": {\n             "avg": 63,\n             "count": 2,\n             "max": 70,\n             "min": 56,\n             "sum": 126\n         }\n     },\n         "book": {\n             "price": {\n             "avg": 9.592000000000002,\n             "count": 5,\n             "max": 12.99,\n             "min": 5.99,\n             "sum": 47.96000000000001\n             }\n         }\n      }\n   }\n}\n')))),(0,o.kt)("p",null,"You may not select a field or an aggregation function, if it's not needed, Hypi will perform calculations only if you select the field or specify the aggregate function. This means you get faster queries by specifying less."),(0,o.kt)("h3",{id:"aggregate-distinct-rows"},"Aggregate Distinct Rows"),(0,o.kt)("p",null,"You may aggregate unique rows by specifying the filter \u2018distinct\u2019 as true. Hypi considers repeated values as just one value. Hence, the count of books has gone down to 3. Only three unique prices have been selected for aggregation. (12.99,5.99,10)"),(0,o.kt)(l.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"query",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  aggregate {\n    book {\n      price {\n        avg(distinct: true)\n        count(distinct: true)\n        sum(distinct: true)\n      }\n    }\n  }\n}\n"))),(0,o.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n     "aggregate": {\n         "book": {\n             "price": {\n             "avg": 9.660000000000002,\n             "count": 3,\n             "sum": 28.980000000000004\n             }\n         }\n     }\n   }\n}\n')))),(0,o.kt)("h3",{id:"aggregate-matching-rows"},"Aggregate Matching Rows"),(0,o.kt)("p",null,"You may select matching rows ( records with the specific field value) and perform aggregation on those rows. The below example shows the aggregation of prices of books with ",(0,o.kt)("inlineCode",{parentName:"p"},"authorid")," equal to \u20182\u2019.",(0,o.kt)("inlineCode",{parentName:"p"},"where")," clause have been used for row selection. The result returns aggregate values of prices of books of the second author.,i.e. Paulo Coelho"),(0,o.kt)(l.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"query",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  aggregate {\n    book(where: \"authorid='2'\") {\n      price {\n        avg\n        count\n        sum\n      }\n    }\n  }\n}\n"))),(0,o.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n     "aggregate": {\n         "book": {\n             "price": {\n                 "avg": 9.49,\n                 "count": 2,\n                 "sum": 18.98\n                 }\n             }\n         }\n     }\n}\n')))),(0,o.kt)("h3",{id:"aggregate-with-groupby"},"Aggregate with groupBy"),(0,o.kt)("p",null,"You may make specific groups of records and perform aggregate operations on them. Use ",(0,o.kt)("inlineCode",{parentName:"p"},"groupBy")," clause as a filter. The below example makes two groups by specifying ",(0,o.kt)("inlineCode",{parentName:"p"},"authorid")," as groupBy field. There are two groups of books with 2 distinct authorids. So, authorid is a key with values 1 and 2. ",(0,o.kt)("inlineCode",{parentName:"p"},"groupValues")," povide the key (groupBy field) and the value of the key."),(0,o.kt)("p",null,"\u2018With\u2019 gets attached to the data type to form the aggregate query function. Use the function ",(0,o.kt)("inlineCode",{parentName:"p"},"bookWith")," for using the groupby clause. (Here data type is ",(0,o.kt)("inlineCode",{parentName:"p"},"book"),"). You may specify the order to sort the key values,i.e. ascending or descending. (ASC/DESC). The ",(0,o.kt)("inlineCode",{parentName:"p"},"bookWith")," function returns the aggregate prices of books of two authors."),(0,o.kt)(l.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"query",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n aggregate {\n     bookWith(groupBy: [{ field: authorid, order: DESC }]) {\n         price {\n             avg\n             count\n             sum\n             groupValues {\n                 key\n                 value\n             }\n         }\n      }\n   }\n}\n"))),(0,o.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n "aggregate": {\n "bookWith": [\n     {\n         "price": {\n             "avg": 9.49,\n             "count": 2,\n             "sum": 18.98,\n             "groupValues": [\n                 {\n                 "key": "authorid",\n                 "value": "2"\n                 }\n              ]\n           }\n     },\n     {\n     "price": {\n         "avg": 9.660000000000002,\n         "count": 3,\n         "sum": 28.980000000000004,\n         "groupValues": [\n             {\n             "key": "authorid",\n             "value": "1"\n             }\n           ]\n         }\n       }\n     ]\n    }\n  }\n}\n')))),(0,o.kt)("h3",{id:"aggregate-by-date"},"Aggregate by Date"),(0,o.kt)("p",null,"You may group the fields based upon the ",(0,o.kt)("inlineCode",{parentName:"p"},"dateTime")," field. Hypi object has the dateTime fields like ",(0,o.kt)("inlineCode",{parentName:"p"},"hypi_created")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"hypi_updated"),". The below example has groups based upon the date of creation of objects. dateGranularity can be set to DAYS, HOURS, MINUTES, or SECONDS."),(0,o.kt)(l.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"query",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},"{\n  aggregate {\n    bookWith(groupBy: [{ field: hypi_created, dateGranularity: MINUTES }]) {\n      price {\n        avg\n        count\n        sum\n        groupValues {\n          key\n          value\n        }\n      }\n    }\n  }\n}\n"))),(0,o.kt)(i.Z,{value:"response",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n "aggregate": {\n     "bookWith": [\n         {\n             "price": {\n                 "avg": 2.99,\n                 "count": 1,\n                 "sum": 2.99,\n                 "groupValues":[\n                     {\n                     "key": "hypi_created",\n                     "value": "2021-03-15 10:52"\n                     }\n                 ]\n             }\n         },\n         {\n             "price": {\n                 "avg": 9.592000000000002,\n                 "count": 5,\n                 "sum": 47.96000000000001,\n                 "groupValues": [\n                     {\n                     "key": "hypi_created",\n                     "value": "2021-03-15 10:39"\n                     }\n                 ]\n             }\n          }\n       ]\n    }\n  }\n}\n')))),(0,o.kt)("p",null,"You can know more about dateGranularity in ",(0,o.kt)("a",{parentName:"p",href:"/docs/lowcode/time-series-aggregations"},"this")," tutorial."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Read More...")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-calculate-an-average-of-the-set-of-values-using-aggregation/86"},"How to calculate an average of the set of values using Aggregation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-count-the-number-of-records-from-a-field-using-aggregation/84"},"How to count the number of records from a field using Aggregation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-calculate-a-sum-of-the-set-of-values-using-aggregation/85"},"How to calculate a sum of the set of values using Aggregation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-retrieve-maximum-and-minimum-values-from-a-field/83"},"How to retrieve maximum and minimum values from a field")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-group-records-and-execute-aggregation-queries/82"},"How to group records and execute aggregation queries")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-group-the-records-based-upon-the-datetime-field/81"},"How to group records based upon the DateTime field"))))))}m.isMDXComponent=!0}}]);