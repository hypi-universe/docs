"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6320],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return k}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),m=p(t),k=r,h=m["".concat(i,".").concat(k)]||m[k]||s[k]||l;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},21332:function(e,n,t){var a=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},8515:function(e,n,t){t.d(n,{Z:function(){return d}});var a=t(87462),r=t(67294),l=t(72389),o=t(35394),u=t(86010),i="tabItem_tAz6";function p(e){var n,t,l,p=e.lazy,d=e.block,s=e.defaultValue,m=e.values,k=e.groupId,h=e.className,c=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=m?m:c.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),g=(0,o.lx)(N,(function(e,n){return e.value===n.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===s?s:null!=(n=null!=s?s:null==(t=c.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(l=c[0])?void 0:l.props.value;if(null!==y&&!N.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+N.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var f=(0,o.UB)(),v=f.tabGroupChoices,b=f.setTabGroupChoices,A=(0,r.useState)(y),T=A[0],q=A[1],w=[],E=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var x=v[k];null!=x&&x!==T&&N.some((function(e){return e.value===x}))&&q(x)}var Q=function(e){var n=e.currentTarget,t=w.indexOf(n),a=N[t].value;a!==T&&(E(n),q(a),null!=k&&b(k,a))},I=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=w.indexOf(e.currentTarget)+1;t=w[a]||w[0];break;case"ArrowLeft":var r=w.indexOf(e.currentTarget)-1;t=w[r]||w[w.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":d},h)},N.map((function(e){var n=e.value,t=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return w.push(e)},onKeyDown:I,onFocus:Q,onClick:Q},l,{className:(0,u.Z)("tabs__item",i,null==l?void 0:l.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),p?(0,r.cloneElement)(c.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},c.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function d(e){var n=(0,l.Z)();return r.createElement(p,(0,a.Z)({key:String(n)},e))}},31219:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return d},metadata:function(){return s},toc:function(){return m},default:function(){return h}});var a=t(87462),r=t(63366),l=(t(67294),t(3905)),o=t(8515),u=t(21332),i=["components"],p={id:"arcql",title:"ArcQL filtering",sidebar_label:"ArcQL filtering",slug:"/lowcode/arcql"},d=void 0,s={unversionedId:"lowcode/arcql",id:"lowcode/arcql",title:"ArcQL filtering",description:"Hypi offers a powerful query language as part of its platform. ArcQL works as a filter to select data to process upon. ArcQL statements are used along with query functions like find.You will be able to make your own ArcQL statements as they are easy to construct. ArcQL is very much SQL-like. If you understand SQL, you will write the ArcQL statements just by guessing at it.",source:"@site/content/lowcode/arcql.md",sourceDirName:"lowcode",slug:"/lowcode/arcql",permalink:"/docs/lowcode/arcql",editUrl:"https://github.com/hypi-universe/docs/edit/master/content/lowcode/arcql.md",tags:[],version:"current",frontMatter:{id:"arcql",title:"ArcQL filtering",sidebar_label:"ArcQL filtering",slug:"/lowcode/arcql"},sidebar:"docs",previous:{title:"Delete Data",permalink:"/docs/lowcode/delete-data"},next:{title:"References",permalink:"/docs/lowcode/references"}},m=[{value:"Sort Query",id:"sort-query",children:[{value:"SORT EXAMPLE 1",id:"sort-example-1",children:[],level:4},{value:"SORT EXAMPLE 2",id:"sort-example-2",children:[],level:4}],level:3},{value:"Term Query",id:"term-query",children:[{value:"TERM QUERY EXAMPLE 1",id:"term-query-example-1",children:[],level:4},{value:"TERM QUERY EXAMPLE 2",id:"term-query-example-2",children:[],level:4},{value:"TERM QUERY EXAMPLE 3",id:"term-query-example-3",children:[],level:4}],level:3},{value:"Phrase Query",id:"phrase-query",children:[{value:"PHRASE QUERY EXAMPLE 1",id:"phrase-query-example-1",children:[],level:4},{value:"PHRASE QUERY EXAMPLE 2",id:"phrase-query-example-2",children:[],level:4}],level:3},{value:"EXIST",id:"exist",children:[],level:3},{value:"NOT EXIST",id:"not-exist",children:[],level:3},{value:"Prefix Query",id:"prefix-query",children:[{value:"PREFIX QUERY EXAMPLE 1",id:"prefix-query-example-1",children:[],level:4}],level:3},{value:"Wildcard Query",id:"wildcard-query",children:[{value:"WILDCARD QUERY EXAMPLE 1",id:"wildcard-query-example-1",children:[],level:4},{value:"WILDCARD QUERY EXAMPLE 2",id:"wildcard-query-example-2",children:[],level:4}],level:3},{value:"Range Query",id:"range-query",children:[{value:"RANGE QUERY EXAMPLE 1",id:"range-query-example-1",children:[],level:4},{value:"RANGE QUERY EXAMPLE 2",id:"range-query-example-2",children:[],level:4},{value:"RANGE QUERY EXAMPLE 3",id:"range-query-example-3",children:[],level:4}],level:3},{value:"Match All Query",id:"match-all-query",children:[],level:3},{value:"Comparison Query",id:"comparison-query",children:[{value:"COMPARISON QUERY EXAMPLE 1",id:"comparison-query-example-1",children:[],level:4},{value:"COMPARISON QUERY EXAMPLE 2",id:"comparison-query-example-2",children:[],level:4},{value:"COMPARISON QUERY EXAMPLE 3",id:"comparison-query-example-3",children:[],level:4}],level:3},{value:"Geo Location",id:"geo-location",children:[],level:3},{value:"TYPE IN-FIELD IN Queries",id:"type-in-field-in-queries",children:[{value:"TYPE IN",id:"type-in",children:[],level:4},{value:"FIELD IN",id:"field-in",children:[],level:4}],level:3}],k={toc:m};function h(e){var n=e.components,t=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},k,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Hypi offers a powerful query language as part of its platform. ",(0,l.kt)("inlineCode",{parentName:"p"},"ArcQL")," works as a filter to select data to process upon. ArcQL statements are used along with query functions like ",(0,l.kt)("inlineCode",{parentName:"p"},"find"),".You will be able to make your own ArcQL statements as they are easy to construct. ",(0,l.kt)("inlineCode",{parentName:"p"},"ArcQL")," is very much SQL-like. If you understand SQL, you will write the ArcQL statements just by guessing at it."),(0,l.kt)("p",null,"We will frame ",(0,l.kt)("inlineCode",{parentName:"p"},"AcrQL")," queries to get data from the below schema."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"type\xa0Author\xa0{\n    name:\xa0String\n    age:\xa0Int\n    bestbook:\xa0Book\n    booklist(...):\xa0[Book!]\n}\n\ntype\xa0Book\xa0{\n    title:\xa0String\n    authorid:\xa0Int\n    price:\xa0Float\n}\n")),(0,l.kt)("p",null,"Insert the following data in the table ",(0,l.kt)("inlineCode",{parentName:"p"},"Author"),". Know more about Insert ",(0,l.kt)("a",{parentName:"p",href:"/docs/lowcode/create-data"},"here"),"."),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"For illustration purpose, the data is demonstrated in the form of table."))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"hypi.id"),(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"age"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author1")),(0,l.kt)("td",{parentName:"tr",align:null},"Dan Brown"),(0,l.kt)("td",{parentName:"tr",align:null},"56")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author2")),(0,l.kt)("td",{parentName:"tr",align:null},"Paulo Coelho"),(0,l.kt)("td",{parentName:"tr",align:null},"70")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author3")),(0,l.kt)("td",{parentName:"tr",align:null},"Sudha Murti"),(0,l.kt)("td",{parentName:"tr",align:null},"70")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author4")),(0,l.kt)("td",{parentName:"tr",align:null},"Agatha christie"),(0,l.kt)("td",{parentName:"tr",align:null},"null")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"booklist"),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"hypi.id")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"title")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"price")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"authorid"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Author1Book1"),(0,l.kt)("td",{parentName:"tr",align:null},"Da Vinci Code"),(0,l.kt)("td",{parentName:"tr",align:null},"12.99"),(0,l.kt)("td",{parentName:"tr",align:null},"1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Author1Book2"),(0,l.kt)("td",{parentName:"tr",align:null},"The Last Symbol"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Author1Book3"),(0,l.kt)("td",{parentName:"tr",align:null},"Inferno"),(0,l.kt)("td",{parentName:"tr",align:null},"5.99"),(0,l.kt)("td",{parentName:"tr",align:null},"1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Author2Book1"),(0,l.kt)("td",{parentName:"tr",align:null},"Alchemist"),(0,l.kt)("td",{parentName:"tr",align:null},"5.99"),(0,l.kt)("td",{parentName:"tr",align:null},"2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Author2Book2"),(0,l.kt)("td",{parentName:"tr",align:null},"Warriors of light"),(0,l.kt)("td",{parentName:"tr",align:null},"12.99"),(0,l.kt)("td",{parentName:"tr",align:null},"2")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Author3Book1"),(0,l.kt)("td",{parentName:"tr",align:null},"Wise and Otherwise"),(0,l.kt)("td",{parentName:"tr",align:null},"3.99"),(0,l.kt)("td",{parentName:"tr",align:null},"3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Author3Book2"),(0,l.kt)("td",{parentName:"tr",align:null},"How I taught my GrandMother to Read"),(0,l.kt)("td",{parentName:"tr",align:null},"2.99"),(0,l.kt)("td",{parentName:"tr",align:null},"3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"null")))),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Let's get inside the ArcQL query statements one by one.")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#sort-query"},"Sort Query")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#term-query"},"Term Query")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#phrase-query"},"Phrase Query")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#exist"},"EXIST")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#not-exist"},"NOT EXIST")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#prefix-query"},"Prefix Query")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#wildcard-query"},"Wildcard Query")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#range-query"},"Range Query")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#match-all-query"},"Match All Query")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#geo-location"},"Geo Location")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#type-in-field-in-queries"},"Type In-Field In Queries"))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"sort-query"},"Sort Query"),(0,l.kt)("p",null,"To sort data in ascending or descending order, use the SORT clause."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"{arcql: fieldName SORT hypi.created ASC|DESC}")),(0,l.kt)("p",null,"You may frame a query like this:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"SORT a"),(0,l.kt)("li",{parentName:"ul"},"SORT a ASC"),(0,l.kt)("li",{parentName:"ul"},"SORT a DESC"),(0,l.kt)("li",{parentName:"ul"},"SORT a, b.c DESC, c")),(0,l.kt)("p",null,"Here, ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," is the field name. ",(0,l.kt)("inlineCode",{parentName:"p"},"b")," is an object and ",(0,l.kt)("inlineCode",{parentName:"p"},"c")," is the field in object b."),(0,l.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"If ASC/DESC order is not specified, hypi performs DESC order by default."))),(0,l.kt)("p",null,"Let\u2019s consider few examples with the inserted data:"),(0,l.kt)("h4",{id:"sort-example-1"},"SORT EXAMPLE 1"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},'arcql: "* SORT title ASC"')),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'{\n find(type: Book, arcql: "* SORT title ASC") {\n     edges {\n         node {\n         ... on Book {\n             title\n             }\n         }\n     cursor\n     }\n  }\n}\n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n     "find": {\n         "edges": [\n             {\n                 "node": {\n                     "title": "Alchemist"\n                 },\n                 "cursor": "Author2Book1"\n             },\n             {\n                 "node": {\n                 "title": "Da Vinci Code"\n                 },\n                 "cursor": "Author1Book1"\n             },\n             {\n                 "node": {\n                 "title": "How I taught my GrandMother to Read"\n                 },\n                 "cursor": "Author3Book2"\n             },\n             {\n                 "node": {\n                 "title": "Inferno"\n                 },\n                 "cursor": "Author1Book3"\n             },\n             {\n                 "node": {\n                 "title": "The Last Symbol"\n                 },\n                 "cursor": "Author1Book2"\n             },\n             {\n                 "node": {\n                 "title": "Warriors of light"\n                 },\n                 "cursor": "Author2Book2"\n             },\n             {\n                 "node": {\n                 "title": "Wise and Otherwise"\n                 },\n                 "cursor": "Author3Book1"\n             }\n             ]\n         }\n     }\n}\n')))),(0,l.kt)("h4",{id:"sort-example-2"},"SORT EXAMPLE 2"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},'arcql: "* SORT price DESC"')),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},' find(type: Book, arcql: "* SORT price DESC") {\n     edges {\n         node {\n             ... on Book {\n             price\n             }\n         }\n         cursor\n         }\n     }\n}\n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n         "find": {\n             "edges": [\n                 {\n                     "node": {\n                     "price": 12.99\n                     },\n                     "cursor": "Author1Book1"\n                 },\n                 {\n                     "node": {\n                     "price": 12.99\n                     },\n                     "cursor": "Author2Book2"\n                 },\n                 {\n                     "node": {\n                     "price": 10\n                     },\n                     "cursor": "Author1Book2"\n                 },\n                 {\n                     "node": {\n                     "price": 5.99\n                     },\n                     "cursor": "Author2Book1"\n                 },\n                 {\n                     "node": {\n                     "price": 5.99\n                     },\n                     "cursor": "Author1Book3"\n                 },\n                 {\n                     "node": {\n                     "price": 3.99\n                     },\n                     "cursor": "Author3Book1"\n                 },\n                 {\n                     "node": {\n                     "price": 2.99\n                     },\n                     "cursor": "Author3Book2"\n                 }\n             ]\n         }\n     }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"term-query"},"Term Query"),(0,l.kt)("p",null,"A term query is a simple filter asking to return results that match the provided value exactly. It searches for the record that contains the data mentioned in the arcql statement. E.g."),(0,l.kt)("p",null,"You may frame a query like this:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a = 'some string'"),(0,l.kt)("li",{parentName:"ul"},"a = 123"),(0,l.kt)("li",{parentName:"ul"},"a = 'some string' OR 123 AND 'abc'")),(0,l.kt)("p",null,"Boolean Logic is possible on all query types. As specified in the third statement, AND and OR logic can be utilized to get specific records."),(0,l.kt)("h4",{id:"term-query-example-1"},"TERM QUERY EXAMPLE 1"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"arcql: \"title='Wise and Otherwise'\"")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Book, arcql: \"title='Wise and Otherwise'\") {\n    edges {\n      node {\n        ... on Book {\n          price\n          authorid\n        }\n      }\n      cursor\n    }\n  }\n}\n\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "price": 3.99,\n            "authorid": 3\n          },\n          "cursor": "Author3Book1"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("h4",{id:"term-query-example-2"},"TERM QUERY EXAMPLE 2"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"price=5.99 AND authorid = 2")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'{\n  find(type: Book, arcql: "price=5.99 AND authorid = 2") {\n    edges {\n      node {\n        ... on Book {\n          price\n          authorid\n          title\n        }\n      }\n      cursor\n    }\n  }\n}\n\n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "price": 5.99,\n            "authorid": 2,\n            "title": "Alchemist"\n          },\n          "cursor": "Author2Book1"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("h4",{id:"term-query-example-3"},"TERM QUERY EXAMPLE 3"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"(price=5.99 AND authorid = 1) OR authorid = 2")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'{\n  find(type: Book, arcql: "(price=5.99 AND authorid = 1) OR authorid = 2") {\n    edges {\n      node {\n        ... on Book {\n          price\n          authorid\n          title\n        }\n      }\n      cursor\n    }\n  }\n}\n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "price": 5.99,\n            "authorid": 1,\n            "title": "Inferno"\n          },\n          "cursor": "Author1Book3"\n        },\n        {\n          "node": {\n            "price": 5.99,\n            "authorid": 2,\n            "title": "Alchemist"\n          },\n          "cursor": "Author2Book1"\n        },\n        {\n          "node": {\n            "price": 12.99,\n            "authorid": 2,\n            "title": "Warriors of light"\n          },\n          "cursor": "Author2Book2"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"phrase-query"},"Phrase Query"),(0,l.kt)("p",null,"Phrase query searches for the individual words or exact phrases from the data. It is similar to a search engine that searches the phrase through various web pages."),(0,l.kt)("p",null,"You may frame a query like this:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a ~ 'some string'"),(0,l.kt)("li",{parentName:"ul"},"a ~ 123"),(0,l.kt)("li",{parentName:"ul"},"a ~ 'some string' OR 123")),(0,l.kt)("p",null,"Here ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," is any field from the data type. Consider the third statement. Here, the query returns data from the ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," field which has strings \u2018some\u2019 or \u2018 string\u2019 or integer 123."),(0,l.kt)("h4",{id:"phrase-query-example-1"},"PHRASE QUERY EXAMPLE 1"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"name ~ 'sudha'")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Author, arcql: \"name ~ 'sudha'\" ) {\n    edges {\n      node {\n        ... on Author {\n          name\n        }\n      }\n      cursor\n    }\n  }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Sudha Murti"\n          },\n          "cursor": "Author3"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("h4",{id:"phrase-query-example-2"},"PHRASE QUERY EXAMPLE 2"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"name ~ 'sudha' OR age ~ 56")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Author, arcql: \"name ~ 'sudha' OR age ~ 56\" ) {\n    edges {\n      node {\n        ... on Author {\n          name\n        }\n      }\n      cursor\n    }\n  }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown"\n          },\n          "cursor": "Author1"\n        },\n        {\n          "node": {\n            "name": "Sudha Murti"\n          },\n          "cursor": "Author3"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"exist"},"EXIST"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"EXIST a")),(0,l.kt)("p",null,"This query returns records that have non-null data in the field ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'{\n  find(type: Author, arcql: "EXIST age") {\n    edges {\n      node {\n        ... on Author {\n         name\n         age\n        }\n      }\n      cursor\n    }\n  }\n}\n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown",\n            "age": 56\n          },\n          "cursor": "Author1"\n        },\n        {\n          "node": {\n            "name": "Paulo Coelho",\n            "age": 70\n          },\n          "cursor": "Author2"\n        },\n        {\n          "node": {\n            "name": "Sudha Murti",\n            "age": 70\n          },\n          "cursor": "Author3"\n        }\n        \n      ]\n    }\n  }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"not-exist"},"NOT EXIST"),(0,l.kt)("p",null,"This query returns records that have null data in the field ",(0,l.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"NOT EXIST a")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'{\n  find(type: Author, arcql: "NOT EXIST age") {\n    edges {\n      node {\n        ... on Author {\n         name\n         age\n        }\n      }\n      cursor\n    }\n  }\n}\n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n    {\n          "node": {\n            "name": "Agatha christie",\n            "age": null\n           },\n          "cursor": "Author4"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"prefix-query"},"Prefix Query"),(0,l.kt)("p",null,"A prefix query returns records that have data starting with the prefix stated in the query."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a ^ 123"),(0,l.kt)("li",{parentName:"ul"},"a ^ 'some string' OR 123")),(0,l.kt)("p",null,"The last statement returns the records from the field ",(0,l.kt)("inlineCode",{parentName:"p"},"a")," that start with \u2018some string\u2019 or \u2018123\u2019"),(0,l.kt)("h4",{id:"prefix-query-example-1"},"PREFIX QUERY EXAMPLE 1"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"name ^ 'Paulo' OR age ^ 5")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Author, arcql: \"name ^ 'Paulo' OR age ^ 5\" ) {\n    edges {\n      node {\n        ... on Author {\n          name\n        }\n      }\n      cursor\n    }\n  }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown"\n          },\n          "cursor": "Author1"\n        },\n        {\n          "node": {\n            "name": "Paulo Coelho"\n          },\n          "cursor": "Author2"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"wildcard-query"},"Wildcard Query"),(0,l.kt)("p",null,"A wildcard character is used to substitute one or more characters in a string. A wildcard query treats ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"?")," as special characters. .\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"*"),"Means match anything from this point onwards. ",(0,l.kt)("inlineCode",{parentName:"p"},"?"),"\xa0Means match any single character at this position"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a ",(0,l.kt)("em",{parentName:"li"}," 'some"),"'"),(0,l.kt)("li",{parentName:"ul"},"a * 123"),(0,l.kt)("li",{parentName:"ul"},"a * 'string_?' OR 123")),(0,l.kt)("p",null,"The first statement searches words with \u2018some\u2019 like someone, somewhere, something, etc. Third sting searches phrases with 'string_?'. The question mark may carry any alphabet, number, or symbol."),(0,l.kt)("h4",{id:"wildcard-query-example-1"},"WILDCARD QUERY EXAMPLE 1"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"name * 'P*'")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Author, arcql: \"name * 'P*'\" ) {\n    edges {\n      node {\n        ... on Author {\n          name\n        }\n      }\n      cursor\n    }\n  }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Paulo Coelho"\n          },\n          "cursor": "Author2"\n        }\n      ]\n    }\n  }\n}\n\n')))),(0,l.kt)("hr",null),(0,l.kt)("h4",{id:"wildcard-query-example-2"},"WILDCARD QUERY EXAMPLE 2"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"age * '?6'")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Author, arcql: \"age * '?6'\" ) {\n    edges {\n      node {\n        ... on Author {\n          name\n        }\n      }\n      cursor\n    }\n  }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown"\n          },\n          "cursor": "Author1"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"range-query"},"Range Query"),(0,l.kt)("p",null,"Range queries search for the content that falls within given range."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a IN (0, 1] => \xa0left inclusive => including 1, excluding 0"),(0,l.kt)("li",{parentName:"ul"},"a IN ","[","0, 1) => right inclusive => excluding 1, including 0"),(0,l.kt)("li",{parentName:"ul"},"a IN (0, 1) => exclusive => not including 0 or 1, only those in between"),(0,l.kt)("li",{parentName:"ul"},"a IN ","[","0, 1","]"," => inclusive => including both 0, 1 and everything in between")),(0,l.kt)("p",null,"You may use boolean logic to combine search e.g."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a IN ","[","0, 1 OR 5,10 AND 10, 11)")),(0,l.kt)("p",null,"Range query also works for strings"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a IN ","[","'America', 'Jamaica')")),(0,l.kt)("p",null,"The strings work in alphabetical order. The query returns the values that start with a letter between \u2018A\u2019 and \u2018J\u2019."),(0,l.kt)("h4",{id:"range-query-example-1"},"RANGE QUERY EXAMPLE 1"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"age IN (50, 70)")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'{\n  find(type: Author, arcql: "age IN (50, 70)") {\n    edges {\n      node {\n        ... on Author {\n          name\n        }\n      }\n      cursor\n    }\n  }\n}\n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown"\n          },\n          "cursor": "Author1"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("h4",{id:"range-query-example-2"},"RANGE QUERY EXAMPLE 2"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"age IN (50, 70]")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'{\n  find(type: Author, arcql: "age IN (50, 70]") {\n    edges {\n      node {\n        ... on Author {\n          name\n        }\n      }\n      cursor\n    }\n  }\n}    \n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown"\n          },\n          "cursor": "Author1"\n        },\n        {\n          "node": {\n            "name": "Paulo Coelho"\n          },\n          "cursor": "Author2"\n        },\n        {\n          "node": {\n            "name": "Sudha Murti"\n          },\n          "cursor": "Author3"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("h4",{id:"range-query-example-3"},"RANGE QUERY EXAMPLE 3"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"title IN ['Da Vinci Code','Inferno']")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Book, arcql: \"title IN ['Da Vinci Code','Inferno']\") {\n    edges {\n      node {\n        ... on Book {\n          title\n        }\n      }\n      cursor\n    }\n  }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "title": "Da Vinci Code"\n          },\n          "cursor": "Author1Book1"\n        },\n        {\n          "node": {\n            "title": "Inferno"\n          },\n          "cursor": "Author1Book3"\n        },\n        {\n          "node": {\n            "title": "How I taught my GrandMother to Read"\n          },\n          "cursor": "Author3Book2"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"match-all-query"},"Match All Query"),(0,l.kt)("p",null,"A match all query is a query with the value ",(0,l.kt)("strong",{parentName:"p"},"\u201c","*","\u201d"),". It returns all the data from all the fields."),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'{\n  find(type: Author, arcql: "*" ) {\n    edges {\n      node {\n        ... on Author {\n          name\n        }\n      }\n      cursor\n    }\n  }\n}\n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown"\n          },\n          "cursor": "Author1"\n        },\n        {\n          "node": {\n            "name": "Paulo Coelho"\n          },\n          "cursor": "Author2"\n        },\n        {\n          "node": {\n            "name": "Sudha Murti"\n          },\n          "cursor": "Author3"\n        },\n        {\n          "node": {\n            "name": "Agatha christie"\n          },\n          "cursor": "Author4"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"comparison-query"},"Comparison Query"),(0,l.kt)("p",null,"Comparison Operators compares the content in a field to a constant value.  ",(0,l.kt)("inlineCode",{parentName:"p"},"< , >, <=,>=, !")," are some of the common comparison operators. They work with integers, floats as well as strings. They can be combined with logical operators to get desired results."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a < 20"),(0,l.kt)("li",{parentName:"ul"},"a > 'S'"),(0,l.kt)("li",{parentName:"ul"},"a <= 10 AND a >=30"),(0,l.kt)("li",{parentName:"ul"},"a != 10")),(0,l.kt)("h4",{id:"comparison-query-example-1"},"COMPARISON QUERY EXAMPLE 1"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"age > 60")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'{\n  find(type: Author, arcql: "age > 60") {\n    edges {\n      node {\n        ... on Author {\n          name\n          age\n        }\n      }\n      cursor\n    }\n  }\n}\n'))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Paulo Coelho",\n            "age": 70\n          },\n          "cursor": "01FG1G5G325TJ3TYRHXN153ZYR"\n        },\n        {\n          "node": {\n            "name": "Sudha Murti",\n            "age": 70\n          },\n          "cursor": "01FG1G5G3AJFW1KW0Z5XV3H29Z"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("h4",{id:"comparison-query-example-2"},"COMPARISON QUERY EXAMPLE 2"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"name < 'P'")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Author, arcql: \"name < 'P'\") {\n    edges {\n      node {\n        ... on Author {\n          name\n        }\n      }\n      cursor\n    }\n  }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "name": "Dan Brown"\n          },\n          "cursor": "01FG1G5G2JDDCHW7CBTCGVS039"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("h4",{id:"comparison-query-example-3"},"COMPARISON QUERY EXAMPLE 3"),(0,l.kt)("p",null,"Query Statement:\n",(0,l.kt)("inlineCode",{parentName:"p"},"title != 'Alchemist' AND price <= 5.99")),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Book, arcql: \"title != 'Alchemist' AND price <= 5.99\") {\n    edges {\n      node {\n        ... on Book {\n          title\n          price\n        }\n      }\n      cursor\n    }\n  }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "find": {\n      "edges": [\n        {\n          "node": {\n            "title": "Inferno",\n            "price": 5.99\n          },\n          "cursor": "01FG1G5G2WJYYCMM16N0SNJ6SJ"\n        },\n        {\n          "node": {\n            "title": "Wise and Otherwise",\n            "price": 3.99\n          },\n          "cursor": "01FG1G5G3C0MFJV38RQAZC9EHJ"\n        },\n        {\n          "node": {\n            "title": "How I taught my GrandMother to Read",\n            "price": 2.99\n          },\n          "cursor": "01FG1G5G3PYND0J77G2T2264WZ"\n        }\n      ]\n    }\n  }\n}\n')))),(0,l.kt)("h3",{id:"geo-location"},"Geo Location"),(0,l.kt)("p",null,"Hypi allows developers to get location data within a radius of a point defined by longitude and latitude."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"geo(latitude, longitude, radius, latitudeFieldName, longitudeFieldName)")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"latitude"),": defined in radians by\xa0latitude * Pi / 180"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"longitude"),": defined in radians by\xa0longitude * Pi / 180"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"radius"),": defined in kilometers, for example, 0.5 stands for 500 meters"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"latitudeFieldName"),": The name of GraphQL type latitude field"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"longitudeFieldName"),": The name of GraphQL type longitude field")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"latitudeFieldName"),"\xa0and\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"longitudeFieldName"),"\xa0give the developers the flexibility to use any float/double decimal point numbers as the source of latitude and longitude. For example, assume that you define a type\xa0GPS\xa0 in your App schema as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"type GPS {\n x: Float\n y: Float\n}\n")),(0,l.kt)("p",null,"Now,\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"latitudeFieldName"),"\xa0should be set to\xa0x and ",(0,l.kt)("inlineCode",{parentName:"p"},"longitudeFieldName"),"\xa0should be set to\xa0y."),(0,l.kt)("p",null,"To query the locations within a radius of 500 meters of a point, degrees(31.9913129, 34.8661077) are converted to radians(0.55835, 0.60852)."),(0,l.kt)("p",null,"Insert data in GPS. Remember x and y values are in\xa0",(0,l.kt)("strong",{parentName:"p"},"radians"),"\xa0not degrees."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},"mutation {\n upsert(\n     values: {\n         GPS: [\n             {x: 0.55835374214, y: 0.6084901767 }\n             {x: 0.55835374214, y: 0.6084901767 }\n             {x: -0.41167494186, y: -0.81812175344 }\n             {x: -0.41786913283, y: -0.80969561972 }\n             {x: -0.41776046165, y: -0.81033767224 }\n             {x: 0.89901594913, y: -0.002154727644 }\n             {x: 0.89938548071, y: -0.0022373637481 }\n             {x: 0.90000538675, y: -0.0027382086662 }\n             {x: 0.55843351241, y: 0.60848146576 }\n             {x: 0.55769501648, y: 0.60841038723 }\n             { x: 0.55831914971, y: 0.60843128929 }\n             ]\n         }\n     ) {\n     id\n     }\n}\n")),(0,l.kt)("p",null,"Now we can locate the objects within a given radius."),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n find(type: GPS, arcql: \"geo(0.55835374214,0.60852837672,0.5,'x','y')\") {\n     edges {\n         node {\n         ... on GPS {\n                     x\n                     y\n                 }\n             }\n         }\n     }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n     "find": {\n         "edges": [\n             {\n             "node": {\n                 "x": 0.55835374214,\n                 "y": 0.6084901767\n                 }\n             },\n             {\n                 "node": {\n                 "x": 0.55835374214,\n                 "y": 0.6084901767\n                 }\n             }\n         ]\n     }\n   }\n}\n')))),(0,l.kt)("h3",{id:"type-in-field-in-queries"},"TYPE IN-FIELD IN Queries"),(0,l.kt)("p",null,"Both forms of queries ",(0,l.kt)("inlineCode",{parentName:"p"},"<fieldExr> TYPE IN"),"\xa0and\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"<fieldExpr> FIELD IN"),"\xa0are translated to SQL sub-queries with the\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"IN"),"\xa0clause. These forms of queries act only on scalar fields."),(0,l.kt)("p",null,"We will go through examples to understand working on these two clauses."),(0,l.kt)("h4",{id:"type-in"},"TYPE IN"),(0,l.kt)("p",null,"Consider a question for Author data.:  ",(0,l.kt)("strong",{parentName:"p"},"What are the books by Author2"),"?"),(0,l.kt)("p",null,"The simple ArcQL query to select Author2 could be"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"type: Author, arcql:  \u201chypi.id=\u2019Author2\u2019\u201d")),(0,l.kt)("p",null,"This query would fetch the records (booklist) for Author2. But what if table \u2018Book\u2019 contains some books with \u2018Author2\u2019. The data from the Book table would not be fetched by the above query. Here, TYPEIN would come to the rescue."),(0,l.kt)("p",null,"TYPE IN would perform a ",(0,l.kt)("inlineCode",{parentName:"p"},"SELF JOIN")," on Book table and select the data with matching Author Name (Author2). "),(0,l.kt)("p",null,"Now, let\u2019s enter another field ",(0,l.kt)("inlineCode",{parentName:"p"},"authorinfo")," in the Book type which holds information of an author for a particular book. So our schema has been modified like this."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"type Book\xa0{\n    hypi:\xa0Hypi\n    title:\xa0String\n    authorid:\xa0Int\n    price:\xa0Float\n    authorinfo:\xa0Author\n}\n\ntype Author\xa0{\n    hypi:\xa0Hypi\n    name:\xa0String\n    age:\xa0Int\n    booklist(...):\xa0[Book!]\n}\n")),(0,l.kt)("p",null,"Consider we have the following data in the Author and Book table."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Author")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"hypi.id")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"name")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"age")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author1")),(0,l.kt)("td",{parentName:"tr",align:null},"Dan Brown"),(0,l.kt)("td",{parentName:"tr",align:null},"56")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author2")),(0,l.kt)("td",{parentName:"tr",align:null},"Paulo Coelho"),(0,l.kt)("td",{parentName:"tr",align:null},"70")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author3")),(0,l.kt)("td",{parentName:"tr",align:null},"Sudha Murti"),(0,l.kt)("td",{parentName:"tr",align:null},"70")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author4")),(0,l.kt)("td",{parentName:"tr",align:null},"Agatha christie"),(0,l.kt)("td",{parentName:"tr",align:null},"null")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Booklist"),(0,l.kt)("th",{parentName:"tr",align:"right"}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"hypi.id book")),(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("strong",{parentName:"td"},"title")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"price")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"authorid")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"authorinfo"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:"right"}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"name"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author1Book1")),(0,l.kt)("td",{parentName:"tr",align:"right"},"Da Vinci Code"),(0,l.kt)("td",{parentName:"tr",align:null},"13"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Dan Brown")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author1Book2")),(0,l.kt)("td",{parentName:"tr",align:"right"},"The Last Symbol"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Dan Brown")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author1Book3")),(0,l.kt)("td",{parentName:"tr",align:"right"},"Inferno"),(0,l.kt)("td",{parentName:"tr",align:null},"5.99"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Dan Brown")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author2Book1")),(0,l.kt)("td",{parentName:"tr",align:"right"},"Alchemist"),(0,l.kt)("td",{parentName:"tr",align:null},"5.99"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"Paulo Coelho")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author2Book2")),(0,l.kt)("td",{parentName:"tr",align:"right"},"Warriors of light"),(0,l.kt)("td",{parentName:"tr",align:null},"13"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"Paulo Coelho")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author3Book1")),(0,l.kt)("td",{parentName:"tr",align:"right"},"Wise and Otherwise"),(0,l.kt)("td",{parentName:"tr",align:null},"3.99"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Sudha Murti")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Author3Book2")),(0,l.kt)("td",{parentName:"tr",align:"right"},"How I taught my GrandMother to Read"),(0,l.kt)("td",{parentName:"tr",align:null},"2.99"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Sudha Murti")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Null"),(0,l.kt)("td",{parentName:"tr",align:"right"},"Null"),(0,l.kt)("td",{parentName:"tr",align:null},"null"),(0,l.kt)("td",{parentName:"tr",align:null},"Null"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Book")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"hypi.id")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"title")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"price")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"authorid")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"th"},"authorinfo")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"name"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Book1")),(0,l.kt)("td",{parentName:"tr",align:null},"Hamlet"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Shakespeare")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("strong",{parentName:"td"},"Book2")),(0,l.kt)("td",{parentName:"tr",align:null},"Like the flowing river"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"Paulo Coelho")))),(0,l.kt)("p",null,"Now we will combine data from Author and Book with TYPE IN query below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"authorinfo.name TYPE IN Author:\nbooklist.authorinfo.name WHERE hypi.id = 'Author2'\n")),(0,l.kt)("p",null,"In the above ArcQL query, Book table performs ",(0,l.kt)("inlineCode",{parentName:"p"},"SELF JOIN")," combining all the author names (left parameter). Then it performs sub query with ",(0,l.kt)("inlineCode",{parentName:"p"},"IN")," clause and selects the data of Author2(right parameter) . The matching data with the Author name (Paulo Coelho) gets selected."),(0,l.kt)("p",null,"Let\u2019s look into the entire query and results."),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n  find(type: Book, arcql: \"authorinfo.name TYPE IN Author:booklist.authorinfo.name WHERE hypi.id = 'Author2'\") {\n    edges {\n      node {\n        ... on Book {\n         title\n          authorinfo{\n            name          \n          }\n        }\n      }\n      cursor\n    }\n  }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n     "find": {\n         "edges": [\n             {\n                 "node": {\n                     "title": "Alchemist",\n                     "authorinfo": {\n                         "name": "Paulo Coelho"\n                     }\n                 },\n                 "cursor": "Author2Book1"\n             },\n\n             {\n                 "node": {\n                     "title": "Warriors of light",\n                     "authorinfo": {\n                     "name": "Paulo Coelho"\n                     }\n                 },\n                 "cursor": "Author2Book2"\n             },\n             {\n                 "node": {\n                     "title": "Like the flowing river",\n                     "authorinfo": {\n                     "name": "Paulo Coelho"\n                     }\n                 },\n                 "cursor": "Book2"\n                 }\n             ]\n         }\n     }\n}\n')))),(0,l.kt)("p",null,"Thus we get books by ",(0,l.kt)("inlineCode",{parentName:"p"},"Author2")," from both tables using ",(0,l.kt)("inlineCode",{parentName:"p"},"TYPE IN"),". Frame your own query using TYPE IN."),(0,l.kt)("h4",{id:"field-in"},"FIELD IN"),(0,l.kt)("p",null,"Consider below question for Author data."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("em",{parentName:"strong"},"What are the books by Author2 as well as books by other authors?"))),(0,l.kt)("p",null,"Simply searching the Author table or Book table will not give us entire list."),(0,l.kt)("p",null,"Let\u2019s use ",(0,l.kt)("inlineCode",{parentName:"p"},"FIELD IN")," to get results!"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"arql: \u201chypi.id != 'Author2' AND Author:booklist.authorinfo.name FIELD IN Author:booklist.authorinfo.name WHERE hypi.id = 'Author2'\u201d\n")),(0,l.kt)("p",null,"The query says:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Find the names of authors from the booklist where id is Author2 ( Author:booklist.authorinfo.name WHERE hypi.id = 'Author2'\u201d)"),(0,l.kt)("li",{parentName:"ol"},"Find the names of all the authors from booklist (Author:booklist.authorinfo.name)"),(0,l.kt)("li",{parentName:"ol"},"Return all matching authors except Author2")),(0,l.kt)("p",null,"First the query will perform self join on Books table to get all the author names excluding Author2 from left hand side. Then it does a SQL\xa0",(0,l.kt)("inlineCode",{parentName:"p"},"IN"),"\xa0on the results of the query on the right hand side.\xa0"),(0,l.kt)("p",null,"Here Names of Author1, 2 and 3 are the common author names from both sides. Author4 would be skipped from the list. So this list returns all the books (Books by Author2 as well as books not written by Author2)."),(0,l.kt)(o.Z,{defaultValue:"query",values:[{label:"GraphQL Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,l.kt)(u.Z,{value:"query",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},"{\n find(type: Book, arcql: \"hypi.id != 'Author2' AND Author:booklist.authorinfo.name FIELD IN Author:booklist.authorinfo.name WHERE hypi.id = 'Author2'\") {\n     edges {\n         node {\n             ... on Book {\n                 title\n                 authorinfo{\n                     name\n                 }\n             }\n         }\n         cursor\n         }\n     }\n}\n"))),(0,l.kt)(u.Z,{value:"response",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n "data": {\n     "find": {\n         "edges": [\n             {\n                 "node": {\n                 "title": "Da Vinci Code",\n                 "authorinfo": {\n                         "name": "Dan Brown"\n                     }\n                 },\n                 "cursor": "Author1Book1"\n             },\n             {\n                 "node": {\n                 "title": "The Last Symbol",\n                 "authorinfo": {\n                     "name": "Dan Brown"\n                 }\n                 },\n                 "cursor": "Author1Book2"\n             },\n             {\n                 "node": {\n                 "title": "Inferno",\n                 "authorinfo": {\n                 "name": "Dan Brown"\n                 }\n                 },\n                 "cursor": "Author1Book3"\n             },\n             {\n                 "node": {\n                 "title": "Alchemist",\n                 "authorinfo": {\n                 "name": "Paulo Coelho"\n                 }\n                 },\n                 "cursor": "Author2Book1"\n             },\n             {\n                 "node": {\n                 "title": "Warriors of light",\n                 "authorinfo": {\n                     "name": "Paulo Coelho"\n                 }\n                 },\n                 "cursor": "Author2Book2"\n             },\n             {\n                 "node": {\n                 "title": "Wise and Otherwise",\n                 "authorinfo": {\n                 "name": "Sudha Murti"\n                 }\n                 },\n                 "cursor": "Author3Book1"\n             },\n             {\n                 "node": {\n                 "title": "How I taught my GrandMother to Read",\n                 "authorinfo": {\n                 "name": "Sudha Murti"\n                 }\n                 },\n                 "cursor": "Author3Book2"\n             },\n\n             {\n                 "node": {\n                 "title": "Hamlet",\n                 "authorinfo": {\n                 "name": "Shakespeare"\n                 }\n                 },\n                 "cursor": "Book1"\n             },\n\n             {\n                 "node": {\n                 "title": "Like the flowing river",\n                 "authorinfo": {\n                 "name": "Paulo Coelho"\n                 }\n                 },\n                 "cursor": "Book2"\n                 }\n             ]\n         }\n     }\n}\n')))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Read More...")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-sort-the-data-using-arcql/101"},"How to sort the data using ArcQL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-search-the-exact-data-using-arcql-term-query/100"},"How to search the exact data using ArcQL term query")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-search-a-phrase-from-the-data-using-arcql/99"},"How to search a phrase from the data using ArcQL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-search-null-data-in-a-field-using-arcql/97"},"How to search null data in a field using ArcQL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-search-non-null-data-in-a-field-using-arcql/98"},"How to search non-null data in a field using ArcQL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-search-data-with-a-prefix-using-arcql/95"},"How to search data with a prefix using ArcQL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-use-the-wildcards-with-arcql/88"},"How to use the wildcards with ArcQL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-search-the-data-within-a-given-range/87"},"How to search the data within a given range")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-retrieve-all-the-records-using-arcql/94"},"How to retrieve all the records using ArcQL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://hypi.dev/t/how-to-compare-values-using-arcql/93"},"How to compare values using ArcQL"))))))}h.isMDXComponent=!0}}]);